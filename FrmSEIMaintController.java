package com.sic.tasa.rest;


import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.sic.tasa.dataobject.FrmSEIMaintBO;
import com.sic.tasa.exceptions.TASARESTException;
import com.sic.tasa.service.IFrmSEIMaintService;
import com.sic.tasa.util.AtmaLogger;


/*************************************************************************
 * 
 * SIC CONFIDENTIAL
 * _________________________________________________________________________________
 * 
 * SIC is a trademark of SIC Company.
 *
 * Copyright ? 2017 SIC. All rights reserved.
 * 
 * NOTICE: All information contained herein is, and remains the property of SIC
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to SIC and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from SIC.
 *
 *************************************************************************/
// Author : Generated by ATMA ?
// Revision History :


@RestController
@RequestMapping(value = "/FrmSEIMaintController")
public class FrmSEIMaintController {

	 private static AtmaLogger LOGGER = AtmaLogger.create(FrmSEIMaintController.class);

		@Autowired
		private IFrmSEIMaintService frmseimaintService;

		public void setFrmSEIMaintService(IFrmSEIMaintService frmseimaintService) {
		    this.frmseimaintService = frmseimaintService;
		}


    /*
     * Method cbofundsclick
     * @param frmseimaintBOReq
     * @return frmseimaintBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/cbofundsclick" , method = RequestMethod.POST)
    public List<FrmSEIMaintBO> cbofundsclick(FrmSEIMaintBO frmseimaintBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: cbofundsclick and argument : "+frmseimaintBOReq); 
        List<FrmSEIMaintBO> frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();
        try{
            frmseimaintBOResp = frmseimaintService.cbofundsclick(frmseimaintBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: cbofundsclick and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: cbofundsclick()and return : "+frmseimaintBOResp);
        return frmseimaintBOResp;
    }
    /*
     * Method cmdclearclick
     * @param frmseimaintBOReq
     * @return frmseimaintBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/cmdclearclick" , method = RequestMethod.POST)
    public List<FrmSEIMaintBO> cmdclearclick(FrmSEIMaintBO frmseimaintBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: cmdclearclick and argument : "+frmseimaintBOReq); 
        List<FrmSEIMaintBO> frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();
        try{
            frmseimaintBOResp = frmseimaintService.cmdclearclick(frmseimaintBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdclearclick and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: cmdclearclick()and return : "+frmseimaintBOResp);
        return frmseimaintBOResp;
    }
    /*
     * Method formload
     * @param frmseimaintBOReq
     * @return frmseimaintBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/formload" , method = RequestMethod.POST)
    public List<FrmSEIMaintBO> formload(FrmSEIMaintBO frmseimaintBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: formload and argument : "+frmseimaintBOReq); 
        List<FrmSEIMaintBO> frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();
        try{
            frmseimaintBOResp = frmseimaintService.formload(frmseimaintBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: formload and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: formload()and return : "+frmseimaintBOResp);
        return frmseimaintBOResp;
    }
    /*
     * Method txtestrategotfocus
     * @param frmseimaintBOReq
     * @return frmseimaintBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/txtestrategotfocus" , method = RequestMethod.POST)
    public List<FrmSEIMaintBO> txtestrategotfocus(FrmSEIMaintBO frmseimaintBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: txtestrategotfocus and argument : "+frmseimaintBOReq); 
        List<FrmSEIMaintBO> frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();
        try{
            frmseimaintBOResp = ((FrmSEIMaintController) frmseimaintService).txtestrategotfocus(frmseimaintBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: txtestrategotfocus and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: txtestrategotfocus()and return : "+frmseimaintBOResp);
        return frmseimaintBOResp;
    }
    /*
     * Method txtestratekeypress
     * @param frmseimaintBOReq
     * @return frmseimaintBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/txtestratekeypress" , method = RequestMethod.POST)
    public List<FrmSEIMaintBO> txtestratekeypress(FrmSEIMaintBO frmseimaintBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: txtestratekeypress and argument : "+frmseimaintBOReq); 
        List<FrmSEIMaintBO> frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();
        try{
            frmseimaintBOResp = ((FrmSEIMaintController) frmseimaintService).txtestratekeypress(frmseimaintBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: txtestratekeypress and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: txtestratekeypress()and return : "+frmseimaintBOResp);
        return frmseimaintBOResp;
    }
    /*
     * Method txtestratelostfocus
     * @param frmseimaintBOReq
     * @return frmseimaintBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/txtestratelostfocus" , method = RequestMethod.POST)
    public List<FrmSEIMaintBO> txtestratelostfocus(FrmSEIMaintBO frmseimaintBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: txtestratelostfocus and argument : "+frmseimaintBOReq); 
        List<FrmSEIMaintBO> frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();
        try{
            frmseimaintBOResp = ((FrmSEIMaintController) frmseimaintService).txtestratelostfocus(frmseimaintBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: txtestratelostfocus and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: txtestratelostfocus()and return : "+frmseimaintBOResp);
        return frmseimaintBOResp;
    }
}