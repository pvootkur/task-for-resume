package com.sic.tasa.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sic.tasa.dataobject.FrmDailyNavMaintenanceBO;
import com.sic.tasa.exceptions.TASABusinessException;
import com.sic.tasa.repositories.IFrmDailyNavMaintenanceRepository;
import com.sic.tasa.service.IFrmDailyNavMaintenanceService;
import com.sic.tasa.util.AtmaLogger;

/*************************************************************************
 * 
 * SIC CONFIDENTIAL
 * _________________________________________________________________________________
 * 
 * SIC is a trademark of SIC Company.
 *
 * Copyright ? 2017 SIC. All rights reserved.
 * 
 * NOTICE: All information contained herein is, and remains the property of SIC
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to SIC and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from SIC.
 *
 *************************************************************************/
// Author : Generated by ATMA ?
// Revision History :

@Service
public class FrmDailyNavMaintenanceServiceImpl implements
IFrmDailyNavMaintenanceService {

	private static final AtmaLogger LOGGER = AtmaLogger
			.create(FrmDailyNavMaintenanceServiceImpl.class);

	@Autowired
	private IFrmDailyNavMaintenanceRepository frmdailynavmaintenanceRepository;

	public void setFrmDailyNavMaintenanceRepository(
			IFrmDailyNavMaintenanceRepository frmdailynavmaintenanceRepository) {
		this.frmdailynavmaintenanceRepository = frmdailynavmaintenanceRepository;
	}

	// ---------------------------------------------------------
	// PopulateSFGFund
	// -------------------------
	// Populates cboFund with all SFG funds. The itemdata will
	// have the sequence number associated with the fund
	// ---------------------------------------------------------
	/**
	 * Method populatesfgfund
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	public List<FrmDailyNavMaintenanceBO> populatesfgfund()
					throws TASABusinessException {
		LOGGER.debug("Entering into the method: populatesfgfund()");
		List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
		try {
			frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
			frmdailynavmaintenanceBOResp = frmdailynavmaintenanceRepository
					.populatesfgfund1();
			// add the name as the text and
			// frmDailyNavMaintenanceBO.setCboFunds(frmdailynavmaintenanceBO.);
			// Me.cboFunds.AddItem rs.Fields("full_nm")
			// Me.cboFunds.ItemData(i) = rs.Fields("e_invst_instrument_seq")
			// MsgBox("Error in PopulateSFGFund: " & Err.Description,
			// vbExclamation);
		} catch (Exception ex) {
			LOGGER.error("Error occurred in method: populatesfgfund()"
					+ "and terminated due to " + ex.getMessage());
			throw new TASABusinessException(ex);
		}
		LOGGER.debug("Exiting the method: populatesfgfund()" + "return : "
				+ frmdailynavmaintenanceBOResp);
		return frmdailynavmaintenanceBOResp;
	}

	// Displays the current date in the label next to As of Date
	// TODO Handle in Angular - Date format in UI Screen
	/**
	 * Method showcurrentdate
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	// public List<FrmDailyNavMaintenanceBO>
	// showcurrentdate(FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq)
	// throws TASABusinessException{
	// LOGGER.debug("Entering into the method: showcurrentdate()"+"argument : "+frmdailynavmaintenanceBOReq);
	// List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
	// try{
	//
	// // If UCase(OracleEnv) <> "SFGP" Then
	// // Me.txtAsOfDate = Format(DateForModel, "mm/dd/yyyy")
	// // Else
	// // Me.txtAsOfDate = Format(Now(), "mm/dd/yyyy")
	// // End If
	// }catch (Exception ex){
	// LOGGER.error("Error occurred in method: showcurrentdate()"+"and terminated due to "
	// + ex.getMessage());
	// throw new TASABusinessException(ex);
	// }
	// LOGGER.debug("Exiting the method: showcurrentdate()"+"return : "+frmdailynavmaintenanceBOResp);
	// return frmdailynavmaintenanceBOResp;
	// }
	// clears all labels and text fields
	// TODO Handle in Angular - clear all fields in UI Screen
	/**
	 * Method clearallfields
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	// public List<FrmDailyNavMaintenanceBO>
	// clearallfields(FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq)
	// throws TASABusinessException{
	// LOGGER.debug("Entering into the method: clearallfields()"+"argument : "+frmdailynavmaintenanceBOReq);
	// List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
	// try{
	// frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
	// me.txtManualVal="";
	// me.txtManualRepeat="";
	// me.lblEstimatedVal="";
	// me.lblUnAudited="";
	// }catch (Exception ex){
	// LOGGER.error("Error occurred in method: clearallfields()"+"and terminated due to "
	// + ex.getMessage());
	// throw new TASABusinessException(ex);
	// }
	// LOGGER.debug("Exiting the method: clearallfields()"+"return : "+frmdailynavmaintenanceBOResp);
	// return frmdailynavmaintenanceBOResp;
	// }
	// when the user selects an item from the combo box
	// the select fund gets enabled
	/**
	 * Method cbofundsclick
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	//	 TODO Handle in Angular - clear all fields in UI Screen
	//	public List<FrmDailyNavMaintenanceBO> cbofundsclick(
	//			FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq)
	//					throws TASABusinessException {
	//		LOGGER.debug("Entering into the method: cbofundsclick()"
	//				+ "argument : " + frmdailynavmaintenanceBOReq);
	//		List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
	//		try {
	//			frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
	//			 clearallfields(frmdailynavmaintenanceBOReq);
	//			 disable the manual value fields when the user selects a fund
	//			 enablemanualvalfields(frmdailynavmaintenanceBOReq);
	//			 when an item is selected enable the select a fund button
	//						if (!frmdailynavmaintenanceBOReq.getCboFunds().equalsIgnoreCase("")) {
	//							frmdailynavmaintenanceBOReq.setCmdSelFund("true");
	//						}
	//			 MsgBox("Error in cboFunds_Click. " & Err.Description,
	//			 vbExclamation);
	//		} catch (Exception ex) {
	//			LOGGER.error("Error occurred in method: cbofundsclick()"
	//					+ "and terminated due to " + ex.getMessage());
	//			throw new TASABusinessException(ex);
	//		}
	//		LOGGER.debug("Exiting the method: cbofundsclick()" + "return : "
	//				+ frmdailynavmaintenanceBOResp);
	//		return frmdailynavmaintenanceBOResp;
	//	}

	// Adds/updates the record
	// If manual entered value exists, the user can update the value by entering
	// re-enter box and click modify button. If the caption is "Add" means that
	// the
	// user is entering a new manual value. Both manual box and re-enter box
	// have to
	// be filled in and match for an insert/update to take place
	/**
	 * Method cmdaddmodifyclick
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
//	public List<FrmDailyNavMaintenanceBO> cmdaddmodifyclick(
//			FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq)
//					throws TASABusinessException {
//		LOGGER.debug("Entering into the method: cmdaddmodifyclick()"
//				+ "argument : " + frmdailynavmaintenanceBOReq);
//		List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
//		try {
//			frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
			// if there is any past data in the system,
			// if modify, exclude the record we are updating
//				frmdailynavmaintenanceBOResp = frmdailynavmaintenanceRepository
//						.cmdaddmodifyClick1(frmdailynavmaintenanceBOReq);
			// both the manually entered value and the value in the re-enter
			// text box
			// should match to do an add/update
			// if(frmdailynavmaintenanceBOReq.getTxtManualVal().trim().equalsIgnoreCase("")){
			// MsgBox("Please enter a manual value!", vbInformation);
			// txtmanualval(.getSetfocus());
			// return frmdailynavmaintenanceBOResp;
			// } else{
			// manVal=
			// Double.parseDouble(frmdailynavmaintenanceBOReq.getTxtManualVal().trim());
			// CDbl(); - VB Script method to convert an expression into double
			// }
			// if(frmdailynavmaintenanceBOReq.getTxtManualRepeat().trim().equalsIgnoreCase("")){
			// MsgBox("Please enter a manual value in the re-enter box.",
			// vbInformation);
			// txtmanualrepeat(.getSetfocus());
			// } else{
			// manValRepeat=
			// Double.parseDouble(frmdailynavmaintenanceBOReq.getTxtManualRepeat().trim());
			// }

			// if(manVal != manValRepeat){
			// //
			// MsgBox("Manually entered value doesn't match with the Re-enter Value. Nothing is changed in the database!",
			// vbExclamation);
			// }
//			if (frmdailynavmaintenanceBOReq.getCmdaddmodify().equalsIgnoreCase(
//					"ADD")) {
				// insert
//				frmdailynavmaintenanceBOResp = frmdailynavmaintenanceRepository
//						.cmdaddmodifyClick2(frmdailynavmaintenanceBOReq);
//			} else {
				// if there is no actual modification, dont update the database
				// TODO Handle in Angular - check if there is change in UI field values
				//				if (frmdailynavmaintenanceBOReq.getmManEnteredVal() == manVal) {
				// MsgBox("There is no change in the manual value, so no updates are done!",
				// vbInformation);
				// txtmanualval(.getSetfocus());
				//				}
//				frmdailynavmaintenanceBOResp = frmdailynavmaintenanceRepository
//						.cmdaddmodifyClick3(frmdailynavmaintenanceBOReq);
//			}
			// cn(.getExecuteStrsql() ,irecaffected);
			// if(iRecAffected > 0){
			// if(SinsUpd == "I"){
			// MsgBox("Record added successfully!", vbInformation);
			// // cmdAddModify.Enabled = False
			// cmdDelete=true;
			// cmdAddModify="MODIFY";
			// me.mManEnteredVal=CDbl(txtManualVal.Text);
			// // refresh the modular variable with the new manually entered
			// value
			// me.txtManualRepeat="";
			// }
			// } else{
			// MsgBox("Record updated successfully!", vbInformation);
			// cmdAddModify=false;
			// cmdDelete=true;
			// // refresh the modular variable with the new manually entered
			// value
			// me.mManEnteredVal=CDbl(txtManualVal.Text);
			// me.txtManualRepeat="";
			// }
			// }
			// MsgBox("Error in cmdAddModify_Click: " & Err.Description,
			// vbExclamation);
//		} catch (Exception ex) {
//			LOGGER.error("Error occurred in method: cmdaddmodifyclick()"
//					+ "and terminated due to " + ex.getMessage());
//			throw new TASABusinessException(ex);
//		}
//		LOGGER.debug("Exiting the method: cmdaddmodifyclick()" + "return : "
//				+ frmdailynavmaintenanceBOResp);
//		return frmdailynavmaintenanceBOResp;
//	}
	
	/**
	 * Method cmdaddmodifyclick1
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	public List<FrmDailyNavMaintenanceBO> cmdaddmodifyclick1(
			FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq)
					throws TASABusinessException {
		LOGGER.debug("Entering into the method: cmdaddmodifyclick1()"
				+ "argument : " + frmdailynavmaintenanceBOReq);
		List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
		try {
			frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
			// if there is any past data in the system,
			// if modify, exclude the record we are updating
			frmdailynavmaintenanceBOResp = frmdailynavmaintenanceRepository
					.cmdaddmodifyClick1(frmdailynavmaintenanceBOReq);
		} catch (Exception ex) {
			LOGGER.error("Error occurred in method: cmdaddmodifyclick1()"
					+ "and terminated due to " + ex.getMessage());
			throw new TASABusinessException(ex);
		}
		LOGGER.debug("Exiting the method: cmdaddmodifyclick1()" + "return : "
				+ frmdailynavmaintenanceBOResp);
		return frmdailynavmaintenanceBOResp;
	}
	
	/**
	 * Method cmdaddmodifyclick2
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	public List<FrmDailyNavMaintenanceBO> cmdaddmodifyclick2(
			FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq)
					throws TASABusinessException {
		LOGGER.debug("Entering into the method: cmdaddmodifyclick1()"
				+ "argument : " + frmdailynavmaintenanceBOReq);
		List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
		try {
			frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
			frmdailynavmaintenanceBOResp = frmdailynavmaintenanceRepository
					.cmdaddmodifyClick2(frmdailynavmaintenanceBOReq);
		} catch (Exception ex) {
			LOGGER.error("Error occurred in method: cmdaddmodifyclick1()"
					+ "and terminated due to " + ex.getMessage());
			throw new TASABusinessException(ex);
		}
		LOGGER.debug("Exiting the method: cmdaddmodifyclick1()" + "return : "
				+ frmdailynavmaintenanceBOResp);
		return frmdailynavmaintenanceBOResp;
	}
	
	/**
	 * Method cmdaddmodifyclick3
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	public List<FrmDailyNavMaintenanceBO> cmdaddmodifyclick3(
			FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq)
					throws TASABusinessException {
		LOGGER.debug("Entering into the method: cmdaddmodifyclick1()"
				+ "argument : " + frmdailynavmaintenanceBOReq);
		List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
		try {
			frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
			frmdailynavmaintenanceBOResp = frmdailynavmaintenanceRepository
					.cmdaddmodifyClick3(frmdailynavmaintenanceBOReq);
		} catch (Exception ex) {
			LOGGER.error("Error occurred in method: cmdaddmodifyclick1()"
					+ "and terminated due to " + ex.getMessage());
			throw new TASABusinessException(ex);
		}
		LOGGER.debug("Exiting the method: cmdaddmodifyclick1()" + "return : "
				+ frmdailynavmaintenanceBOResp);
		return frmdailynavmaintenanceBOResp;
	}


	// deletes the manual value from the database.
	/**
	 * Method cmddeleteclick
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	public List<FrmDailyNavMaintenanceBO> cmddeleteclick(
			FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq)
					throws TASABusinessException {
		LOGGER.debug("Entering into the method: cmddeleteclick()"
				+ "argument : " + frmdailynavmaintenanceBOReq);
		List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
		try {
			frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
			// TODO Handle in Angular - confirm box
			// answer=MsgBox("Are you sure you want to delete the manually entered value? ",
			// vbQuestion + vbOKCancel);
			// if(answer == vbOK){
			// // delete the record
			frmdailynavmaintenanceBOResp = frmdailynavmaintenanceRepository
					.cmddeleteClick1(frmdailynavmaintenanceBOReq);
			// cn(.getExecuteStrsql());
			// me.txtManualVal="";
			// me.txtManualRepeat="";
			// cmdDelete=false;
			// cmdAddModify="ADD";
			// }
			// MsgBox("Error in cmdDelete_Click: " & Err.Description,
			// vbExclamation);
		} catch (Exception ex) {
			LOGGER.error("Error occurred in method: cmddeleteclick()"
					+ "and terminated due to " + ex.getMessage());
			throw new TASABusinessException(ex);
		}
		LOGGER.debug("Exiting the method: cmddeleteclick()" + "return : "
				+ frmdailynavmaintenanceBOResp);
		return frmdailynavmaintenanceBOResp;
	}

	// populates the text fields and the display fields depending on the
	// fund selected in the fund drop down
	/**
	 * Method populateselectedfunddetails
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	public List<FrmDailyNavMaintenanceBO> populateselectedfunddetails1(
			FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq)
					throws TASABusinessException {
		LOGGER.debug("Entering into the method: populateselectedfunddetails1()"
				+ "argument : " + frmdailynavmaintenanceBOReq);
		List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
		try {
			frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
			frmdailynavmaintenanceBOResp = frmdailynavmaintenanceRepository
					.populateselectedfunddetails1(frmdailynavmaintenanceBOReq);
		} catch (Exception ex) {
			LOGGER.error("Error occurred in method: populateselectedfunddetails1()"
					+ "and terminated due to " + ex.getMessage());
			throw new TASABusinessException(ex);
		}
		LOGGER.debug("Exiting the method: populateselectedfunddetails1()"
				+ "return : " + frmdailynavmaintenanceBOResp);
		return frmdailynavmaintenanceBOResp;
	}
	
	/**
	 * Method populateselectedfunddetails2
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	public List<FrmDailyNavMaintenanceBO> populateselectedfunddetails2(
			FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq)
					throws TASABusinessException {
		LOGGER.debug("Entering into the method: populateselectedfunddetails2()"
				+ "argument : " + frmdailynavmaintenanceBOReq);
		List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
		try {
			frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
			frmdailynavmaintenanceBOResp = frmdailynavmaintenanceRepository
					.populateselectedfunddetails2(frmdailynavmaintenanceBOReq);
		} catch (Exception ex) {
			LOGGER.error("Error occurred in method: populateselectedfunddetails2()"
					+ "and terminated due to " + ex.getMessage());
			throw new TASABusinessException(ex);
		}
		LOGGER.debug("Exiting the method: populateselectedfunddetails2()"
				+ "return : " + frmdailynavmaintenanceBOResp);
		return frmdailynavmaintenanceBOResp;
	}

	// Enables/Disables the manual value fields
	// TODO Handle in Angular - Enabling the fields in UI screen
	/**
	 * Method enablemanualvalfields
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	// public List<FrmDailyNavMaintenanceBO>
	// enablemanualvalfields(FrmDailyNavMaintenanceBO
	// frmdailynavmaintenanceBOReq) throws TASABusinessException{
	// LOGGER.debug("Entering into the method: enablemanualvalfields()"+"argument : "+frmdailynavmaintenanceBOReq);
	// List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
	// try{
	// frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
	// Me.txtManualVal=bEnable;
	// Me.txtManualRepeat=bEnable;
	// Me.lblManVal=bEnable;
	// Me.lblManRepeat=bEnable;
	// }catch (Exception ex){
	// LOGGER.error("Error occurred in method: enablemanualvalfields()"+"and terminated due to "
	// + ex.getMessage());
	// throw new TASABusinessException(ex);
	// }
	// LOGGER.debug("Exiting the method: enablemanualvalfields()"+"return : "+frmdailynavmaintenanceBOResp);
	// return frmdailynavmaintenanceBOResp;
	// }
	// when the user clicks the select a fund button, the details will get
	// populated in the
	// text boxes and display boxes
	// when the form loads up, the fund drop down wont have
	// any items selected, and select fund button will be disabled
	// add button will be disabled, so as delete button
	// close button will be enabled all the time
	// if both manual and man-repeat text boxes contain values, enable the add
	// modify button
	// TODO Handle in Angular - Field enabling
	/**
	 * Method txtmanualrepeatchange
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	// public List<FrmDailyNavMaintenanceBO>
	// txtmanualrepeatchange(FrmDailyNavMaintenanceBO
	// frmdailynavmaintenanceBOReq) throws TASABusinessException{
	// LOGGER.debug("Entering into the method: txtmanualrepeatchange()"+"argument : "+frmdailynavmaintenanceBOReq);
	// List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
	// try{
	// frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
	// // If txtManualVal.Text <> "" And Me.txtManualRepeat <> "" Then
	// // cmdAddModify.Enabled = True
	// // Else
	// // cmdAddModify.Enabled = False
	// // End If
	// }catch (Exception ex){
	// LOGGER.error("Error occurred in method: txtmanualrepeatchange()"+"and terminated due to "
	// + ex.getMessage());
	// throw new TASABusinessException(ex);
	// }
	// LOGGER.debug("Exiting the method: txtmanualrepeatchange()"+"return : "+frmdailynavmaintenanceBOResp);
	// return frmdailynavmaintenanceBOResp;
	// }
	// restrict the user enters anything other than numeric values and decimal
	// point and popup a warning message
	// TODO Handle in Angular - Keypress Event
	/**
	 * Method txtmanualrepeatkeypress
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	// public List<FrmDailyNavMaintenanceBO>
	// txtmanualrepeatkeypress(FrmDailyNavMaintenanceBO
	// frmdailynavmaintenanceBOReq) throws TASABusinessException{
	// LOGGER.debug("Entering into the method: txtmanualrepeatkeypress()"+"argument : "+frmdailynavmaintenanceBOReq);
	// List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
	// try{
	// frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
	// // if enter key is pressed, move the focus to the next control in the tab
	// order
	// if(KeyAscii == 13){
	// }
	// // 48-57 are 0-9, 46 is 0 and 8 is backspace key
	// if((KeyAscii < 48 Or KeyAscii > 57) && KeyAscii != 46 && KeyAscii != 8){
	// MsgBox("Numbers 0 to 9  and Decimal point only, please!", vbExclamation +
	// vbOKOnly, "Input Error");
	// keyAscii=0;
	// }
	// // make sure the user doesnt enter more than one decimal point
	// if(KeyAscii == 46){
	// if(DecimalPointExist(Me.txtManualRepeat)){
	// MsgBox("Cannot enter more than one decimal point, Manual entered value should be a numeric value!",
	// vbExclamation + vbOKOnly, "Input Error");
	// keyAscii=0;
	// }
	// }
	// }catch (Exception ex){
	// LOGGER.error("Error occurred in method: txtmanualrepeatkeypress()"+"and terminated due to "
	// + ex.getMessage());
	// throw new TASABusinessException(ex);
	// }
	// LOGGER.debug("Exiting the method: txtmanualrepeatkeypress()"+"return : "+frmdailynavmaintenanceBOResp);
	// return frmdailynavmaintenanceBOResp;
	// }
	// if both manual and manual repeat contain values enable the add/modify
	// button
	// TODO Handle in Angular - manual change of field value
	/**
	 * Method txtmanualvalchange
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	// public List<FrmDailyNavMaintenanceBO>
	// txtmanualvalchange(FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq)
	// throws TASABusinessException{
	// LOGGER.debug("Entering into the method: txtmanualvalchange()"+"argument : "+frmdailynavmaintenanceBOReq);
	// List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
	// try{
	// frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
	// cmdAddModify=true;
	// MsgBox("Error in txtManualVal_Change. " & Err.Description,
	// vbInformation);
	// }catch (Exception ex){
	// LOGGER.error("Error occurred in method: txtmanualvalchange()"+"and terminated due to "
	// + ex.getMessage());
	// throw new TASABusinessException(ex);
	// }
	// LOGGER.debug("Exiting the method: txtmanualvalchange()"+"return : "+frmdailynavmaintenanceBOResp);
	// return frmdailynavmaintenanceBOResp;
	// }
	// restrict the user enters anything other than numeric values and decimal
	// point and popup a warning message
	// TODO Handle in Angular - point and popup a warning message
	/**
	 * Method txtmanualvalkeypress
	 * 
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASABusinessException
	 */
	// public List<FrmDailyNavMaintenanceBO>
	// txtmanualvalkeypress(FrmDailyNavMaintenanceBO
	// frmdailynavmaintenanceBOReq) throws TASABusinessException{
	// LOGGER.debug("Entering into the method: txtmanualvalkeypress()"+"argument : "+frmdailynavmaintenanceBOReq);
	// List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp = null;
	// try{
	// frmdailynavmaintenanceBOResp = new ArrayList<FrmDailyNavMaintenanceBO>();
	// // if enter key is pressed, move the focus to the next control in the tab
	// order
	// if(KeyAscii == 13){
	// }
	// // 48-57 are 0-9, 46 is 0 and 8 is backspace key
	// if((KeyAscii < 48 Or KeyAscii > 57) && KeyAscii != 46 && KeyAscii != 8){
	// MsgBox("Numbers 0 to 9  and Decimal point only, please!", vbExclamation +
	// vbOKOnly, "Input Error");
	// keyAscii=0;
	// }
	// // make sure the user doesnt enter more than one decimal point
	// if(KeyAscii == 46){
	// if(DecimalPointExist(Me.txtManualVal)){
	// MsgBox("Cannot enter more than one decimal point, Manual entered value should be a numeric value!",
	// vbExclamation + vbOKOnly, "Input Error");
	// keyAscii=0;
	// }
	// }
	// }catch (Exception ex){
	// LOGGER.error("Error occurred in method: txtmanualvalkeypress()"+"and terminated due to "
	// + ex.getMessage());
	// throw new TASABusinessException(ex);
	// }
	// LOGGER.debug("Exiting the method: txtmanualvalkeypress()"+"return : "+frmdailynavmaintenanceBOResp);
	// return frmdailynavmaintenanceBOResp;
	// }

}