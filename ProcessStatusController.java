package com.sic.tasa.rest;


import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.sic.tasa.dataobject.ProcessStatusBO;
import com.sic.tasa.exceptions.TASARESTException;
import com.sic.tasa.service.IProcessStatusService;
import com.sic.tasa.util.AtmaLogger;


/*************************************************************************
 * 
 * SIC CONFIDENTIAL
 * _________________________________________________________________________________
 * 
 * SIC is a trademark of SIC Company.
 *
 * Copyright ? 2017 SIC. All rights reserved.
 * 
 * NOTICE: All information contained herein is, and remains the property of SIC
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to SIC and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from SIC.
 *
 *************************************************************************/
// Author : Generated by ATMA ?
// Revision History :


@RestController
@RequestMapping(value = "/ProcessStatusController")
public class ProcessStatusController {

	private static final AtmaLogger LOGGER = AtmaLogger.create(ProcessStatusController.class.getName());

		@Autowired
		private IProcessStatusService processStatusService;

		public void setProcessStatusService(IProcessStatusService processStatusService) {
		    this.processStatusService = processStatusService;
		}


    /*
     * Method cmdqueryclick
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/cmdqueryclick" , method = RequestMethod.POST)
    public List<ProcessStatusBO> cmdqueryclick(@RequestBody ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: cmdqueryclick and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            processStatusBOResp = processStatusService.cmdqueryclick(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdqueryclick and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: cmdqueryclick()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method cmdrefreshclick
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/cmdrefreshclick" , method = RequestMethod.POST)
    public List<ProcessStatusBO> cmdrefreshclick(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: cmdrefreshclick and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.cmdrefreshclick(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdrefreshclick and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: cmdrefreshclick()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method flexgriddragdrop
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/flexgriddragdrop" , method = RequestMethod.POST)
    public List<ProcessStatusBO> flexgriddragdrop(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: flexgriddragdrop and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.flexgriddragdrop(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: flexgriddragdrop and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: flexgriddragdrop()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method flexgridmousedown
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/flexgridmousedown" , method = RequestMethod.POST)
    public List<ProcessStatusBO> flexgridmousedown(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: flexgridmousedown and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.flexgridmousedown(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: flexgridmousedown and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: flexgridmousedown()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method flexgridmousemove
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/flexgridmousemove" , method = RequestMethod.POST)
    public List<ProcessStatusBO> flexgridmousemove(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: flexgridmousemove and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.flexgridmousemove(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: flexgridmousemove and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: flexgridmousemove()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method flexgridmouseup
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/flexgridmouseup" , method = RequestMethod.POST)
    public List<ProcessStatusBO> flexgridmouseup(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: flexgridmouseup and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.flexgridmouseup(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: flexgridmouseup and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: flexgridmouseup()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method flexgriddblclick
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/flexgriddblclick" , method = RequestMethod.POST)
    public List<ProcessStatusBO> flexgriddblclick(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: flexgriddblclick and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.flexgriddblclick(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: flexgriddblclick and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: flexgriddblclick()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method docolumnsort
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/docolumnsort" , method = RequestMethod.POST)
    public List<ProcessStatusBO> docolumnsort(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: docolumnsort and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.docolumnsort(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: docolumnsort and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: docolumnsort()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method flexgridrowcolchange
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/flexgridrowcolchange" , method = RequestMethod.POST)
    public List<ProcessStatusBO> flexgridrowcolchange(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: flexgridrowcolchange and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.flexgridrowcolchange(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: flexgridrowcolchange and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: flexgridrowcolchange()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method formactivate
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/formactivate" , method = RequestMethod.POST)
    public List<ProcessStatusBO> formactivate(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: formactivate and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.formactivate(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: formactivate and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: formactivate()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method formload
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/formload" , method = RequestMethod.GET)
    public @ResponseBody List<ProcessStatusBO> formload() throws TASARESTException{    
        LOGGER.debug("Entering into the method: formload and argument : "); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            processStatusBOResp = processStatusService.formload();
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: formload and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: formload()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method formatflexgrid
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/formatflexgrid" , method = RequestMethod.POST)
    public List<ProcessStatusBO> formatflexgrid(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: formatflexgrid and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.formatflexgrid(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: formatflexgrid and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: formatflexgrid()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method mshflexgriddblclick
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/mshflexgriddblclick" , method = RequestMethod.POST)
    public List<ProcessStatusBO> mshflexgriddblclick(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: mshflexgriddblclick and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.mshflexgriddblclick(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: mshflexgriddblclick and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: mshflexgriddblclick()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method columnsort
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/columnsort" , method = RequestMethod.POST)
    public List<ProcessStatusBO> columnsort(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: columnsort and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.columnsort(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: columnsort and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: columnsort()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method formresize
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/formresize" , method = RequestMethod.POST)
    public List<ProcessStatusBO> formresize(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: formresize and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.formresize(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: formresize and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: formresize()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method cmdcloseclick
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/cmdcloseclick" , method = RequestMethod.POST)
    public List<ProcessStatusBO> cmdcloseclick(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: cmdcloseclick and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.cmdcloseclick(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdcloseclick and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: cmdcloseclick()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method formunload
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/formunload" , method = RequestMethod.POST)
    public List<ProcessStatusBO> formunload(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: formunload and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.formunload(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: formunload and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: formunload()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method txtappkeypress
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/txtappkeypress" , method = RequestMethod.POST)
    public List<ProcessStatusBO> txtappkeypress(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: txtappkeypress and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.txtappkeypress(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: txtappkeypress and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: txtappkeypress()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method txtapplostfocus
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/txtapplostfocus" , method = RequestMethod.POST)
    public List<ProcessStatusBO> txtapplostfocus(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: txtapplostfocus and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.txtapplostfocus(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: txtapplostfocus and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: txtapplostfocus()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method txtdatekeypress
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/txtdatekeypress" , method = RequestMethod.POST)
    public List<ProcessStatusBO> txtdatekeypress(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: txtdatekeypress and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.txtdatekeypress(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: txtdatekeypress and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: txtdatekeypress()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
    /*
     * Method txtnamekeypress
     * @param processStatusBOReq
     * @return processStatusBOResp
     * @throws TASARESTException
    */
    @RequestMapping(value = "/txtnamekeypress" , method = RequestMethod.POST)
    public List<ProcessStatusBO> txtnamekeypress(ProcessStatusBO processStatusBOReq) throws TASARESTException{    
        LOGGER.debug("Entering into the method: txtnamekeypress and argument : "+processStatusBOReq); 
        List<ProcessStatusBO> processStatusBOResp =  new ArrayList<ProcessStatusBO>();
        try{
            //processStatusBOResp = processStatusService.txtnamekeypress(processStatusBOReq);
        }
        catch (Exception ex){
            LOGGER.error("Error occurred in method: txtnamekeypress and terminated due to " + ex.getMessage());
            throw new TASARESTException(ex);
        }
        LOGGER.debug("Exiting the method: txtnamekeypress()and return : "+processStatusBOResp);
        return processStatusBOResp;
    }
}