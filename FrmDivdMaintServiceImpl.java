package com.sic.tasa.service.impl;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sic.tasa.repositories.IFrmDivdMaintRepository;
import com.sic.tasa.service.IFrmDivdMaintService;
import com.sic.tasa.exceptions.TASABusinessException;
import com.sic.tasa.dataobject.FrmDivdMaintBO;
import com.sic.tasa.util.AtmaLogger;

/*************************************************************************
 * 
 * SIC CONFIDENTIAL
 * _________________________________________________________________________________
 * 
 * SIC is a trademark of SIC Company.
 *
 * Copyright ? 2017 SIC. All rights reserved.
 * 
 * NOTICE: All information contained herein is, and remains the property of SIC
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to SIC and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from SIC.
 *
 *************************************************************************/
// Author : Generated by ATMA ?
// Revision History :  


@Service
public class FrmDivdMaintServiceImpl implements  IFrmDivdMaintService{

    private static final AtmaLogger LOGGER = AtmaLogger.create(FrmDivdMaintServiceImpl.class);

    @Autowired
    private IFrmDivdMaintRepository frmdivdmaintRepository;

    public void setFrmDivdMaintRepository(IFrmDivdMaintRepository frmdivdmaintRepository) {
        this.frmdivdmaintRepository = frmdivdmaintRepository;
    }


	/**
	 * Method cboesttypecdclick
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> cboesttypecdclick(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cboesttypecdclick()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//Integer intI;
//  //  Dim intTypeCode As Integer
//  //      intTypeCode = cboEstTypeCd.ListIndex
//        mblnClearPressed=false;
//    cmdclearClick(frmdivdmaintBOReq);
//        mblnClearPressed=true;
//  //      cboEstTypeCd.ListIndex = intTypeCode
//    for(StringIntI = 1; .lvwDividend.ListItems.Count; i++){
//    if(.cboEstTypeCd.Text == .lvwDividend.ListItems(intI).Text){
//  //   if an item is selected from the listview, populate the fields below it
//  //   with the values from the line selected
//        .DTPEstExDate.Value=.DTPExDate.Value;
//    if(.lvwDividend.ListItems(intI).SubItems(1) > ""){
//        .txtEstRate=.lvwDividend.ListItems(intI).SubItems(1);
//        mstrEstRate=.lvwDividend.ListItems(intI).SubItems(1);
//		}
//   } else{
//        .txtEstRate="";
//        mstrEstRate=0;
//		}
//    if(.lvwDividend.ListItems(intI).SubItems(2) > ""){
//        .DTPActReinvestedDate.Value=.lvwDividend.ListItems(intI).SubItems(2);
//		}
//   } else{
//        .DTPActReinvestedDate.Value=.DTPExDate.Value;
//        .DTPActReinvestedDate.Value=Null;
//		}
//    if(.lvwDividend.ListItems(intI).SubItems(3) > ""){
//        .txtActRate=.lvwDividend.ListItems(intI).SubItems(3);
//        mstrActRate=.lvwDividend.ListItems(intI).SubItems(3);
//		}
//   } else{
//        .txtActRate="";
//        mstrActRate=0;
//		}
//    if(.lvwDividend.ListItems(intI).SubItems(4) > ""){
//        .txtActShares=format()(.lvwDividend.ListItems(intI).SubItems(4), "0.000");
//        mstrActShares=format()(.lvwDividend.ListItems(intI).SubItems(4), "0.000");
//		}
//   } else{
//        .txtActShares="";
//        mstrActShares=0;
//		}
//    if(.lvwDividend.ListItems(intI).SubItems(5) > ""){
//        .txtActDollars=format()(.lvwDividend.ListItems(intI).SubItems(5), "0.00");
//        mstrActDollars=format()(.lvwDividend.ListItems(intI).SubItems(5), "0.00");
//		}
//   } else{
//        .txtActDollars="";
//        mstrActDollars=0;
//		}
//    if(MstrActShares == 0){
//        .txtNAVComputed="000.00";
//		}
//   } else{
//        .txtNAVComputed=format()(MstrActDollars / MstrActShares, "0.00##");
//		}
//    if(.lvwDividend.ListItems(intI).SubItems(6) > ""){
//        .txtNAVUnaudited=format()(.lvwDividend.ListItems(intI).SubItems(6), "0.00##");
//        mstrUnaudited=format()(.lvwDividend.ListItems(intI).SubItems(6), "0.00##");
//		}
//   } else{
//        .txtNAVUnaudited="";
//        mstrUnaudited=0;
//		}
//        .DTPActAppliedDate.Value=.lvwDividend.ListItems(intI).SubItems(7);
//    if(.lvwDividend.ListItems(intI).SubItems(8) > ""){
//        .txtNAVAudited=format()(.lvwDividend.ListItems(intI).SubItems(8), "0.00##");
//        mstrAudited=format()(.lvwDividend.ListItems(intI).SubItems(8), "0.00##");
//		}
//   } else{
//        .txtNAVAudited="";
//        mstrAudited=0;
//		}
//        .cmdRefresh=false;
//  //   actual dollars and actual shares both must have a value for the
//  //   ComputeNAV command button to be enabled
//    if(VBUtilFunctions.length(.txtActDollars.Text) > 0 && VBUtilFunctions.length(.txtActShares.Text) > 0){
//        .cmdComputeNAV=true;
//		}
//		}
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cboesttypecdclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cboesttypecdclick()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method cbofundsclick
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> cbofundsclick(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cbofundsclick()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   when a fund is selected also select the corresponding hidden value for
  //   e_invst_instrument_seq value.  Also clear the listview and disable the
  //   save and refresh command buttons.  Both a fund and a date must be selected
  //   for the select fund button to be enabled
//        .cboInvstInstrmntSeq.ListIndex=.cboFunds.ListIndex;
//        .cboMIPSeq.ListIndex=.cboFunds.ListIndex;
//        .cmdSave=false;
//        .cmdRefresh=false;
//    if(==Null(.DTPExDate.Value)){
//        .cmdSelectFund=false;
//		}
// }   else if(.cboFunds.ListIndex >== 0){
//        .cmdSelectFund=true;
//		}
//   } else{
//        .cmdSelectFund=false;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cbofundsclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cbofundsclick()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method cmdclearclick
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> cmdclearclick(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdclearclick()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   reset input fields to default values.  Clear out module level
  //   variables used to see if values have changed
//    if(MblnClearPressed == true){
//        .cboEstTypeCd.ListIndex=-1;
//		}
//        .txtEstRate="";
//        .DTPActReinvestedDate.Value=.DTPExDate.Value;
//        .DTPActReinvestedDate.Value=Null;
//        .txtActRate="";
//        .txtActShares="";
//        .txtActDollars="";
//        .DTPActAppliedDate.Value=format()(Now, "mm/dd/yyyy");
//        .DTPActAppliedDate.Value=Null;
//        .txtNAVComputed="";
//        .txtNAVAudited="";
//        .txtNAVUnaudited="";
//        mstrActShares="0";
//        mstrActDollars="0";
//        mstrEstRate="0";
//        mstrActRate="0";
//        .cmdComputeNAV=false;
//        .cmdRefresh=true;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdclearclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdclearclick()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method cmdcloseclick
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> cmdcloseclick(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdcloseclick()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//Integer intI;
//Integer intResponse;
//Boolean blnChanges;
//    for(StringIntI = 1; .lvwDividend.ListItems.Count; i++){
//  //   see if any of the listview items have changed.  If they have a message
//  //   box is displayed to the user to see if they want to save changes
//    if(.lvwDividend.ListItems(intI).SubItems(10) == "N"){
//		}
//   } else{
//        blnChanges=true;
//		}
//		}
//    if(blnChanges == true){
//        intResponse=MsgBox("Changes have not been saved to the database." + vbCrLf +            "Do you want to save the changes?", vbYesNoCancel);
//    if(intResponse == vbNo){
//		}
// }   else if(intResponse == vbCancel){
//		}
//   } else{
//    cmdsaveClick(frmdivdmaintBOReq);
//		}
//		}
//   } else{
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdcloseclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdcloseclick()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method cmdcomputenavclick
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> cmdcomputenavclick(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdcomputenavclick()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//Double dblComputeNAV;
//String strSQL;
//ADODB.Recordset rstInvest;
//    if(.cboFunds.ListIndex > -1 && .cboEstTypeCd.ListIndex > -1){
//		}
//   } else{
//    MsgBox("A fund and a dividend type must be selected" &                " before the NAV can be computed");
//    if(.cboFunds.ListIndex == -1){
//		}
//   } else{
//		}
//		}
//    if(CDbl(.txtActShares) == 0){
//        dblComputeNAV=0;
//		}
//   } else{
//        dblComputeNAV=CDbl(.txtActDollars.Text) / CDbl(.txtActShares);
//		}
//        .txtNAVComputed=format()(dblComputeNAV, "0.00##");
//  //   if an item is selected from the listview, the refresh listview button
//  //   is only enabled after this command button is pressed
//        .cmdRefresh=true;
//  //   read the database to retrive the existing NAV values
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdcomputenavClick1(frmdivdmaintBOReq);
//    if(rstInvest.BOF && rstInvest.EOF){
//        .txtNAVAudited="";
//        .txtNAVUnaudited="";
//        mblnNAVFound=false;
//		}
//   } else{
//        mblnNAVFound=true;
//    if(==Null(rstInvest!nav_amt)){
//        .txtNAVUnaudited="";
//		}
//   } else{
//        .txtNAVUnaudited=format()(rstInvest!nav_amt, "0.00##");
//		}
//    if(==Null(rstInvest!audited_nav_amt)){
//        .txtNAVAudited="";
//		}
//   } else{
//        .txtNAVAudited=format()(rstInvest!audited_nav_amt, "0.00##");
//		}
//		}
//    rstinvest(.getClose());
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdcomputenavclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdcomputenavclick()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method cmdrefreshclick
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> cmdrefreshclick(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdrefreshclick()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//Integer intI;
//Integer intJ;
//Boolean blnFound;
//ListItem itmDividend;
//String strEstRate;
//  //   make certain input fields are valid
//    if(.cboEstTypeCd.ListIndex == -1){
//    MsgBox("Estimated Type Code must be selected");
//		}
//    if(.txtActDollars.Text > "" Or .txtActRate.Text > "" Or                .txtActShares.Text > ""){
//    if(==Null(.DTPActReinvestedDate.Value)){
//    MsgBox("Reinvested Date must be entered for Dividend Actual Values");
//		}
//		}
//  //  Turned off by rsmith1 01/21/2009
//  //          If .txtNAVAudited.Text > "" And .txtNAVUnaudited.Text > "" Then
//  //  
//  //              If Abs(.txtNAVAudited.Text) = Abs(.txtNAVUnaudited.Text) Then
//  //  
//  //                  MsgBox "Audited and Unaudited NAV values cannot be equal"
//  //                  .txtNAVAudited.SetFocus
//  //  
//  //                  Exit Sub
//  //  
//  //              End If
//  //  
//  //          End If
//        intJ=0;
//    for(StringIntI = 1; .lvwDividend.ListItems.Count; i++){
//  //   see if the type code already exists in the listview.  If it does,
//  //   that line will be updated.  We cannot have duplicate dividend type codes
//    if(.cboEstTypeCd.Text == .lvwDividend.ListItems(intI).Text){
//        blnFound=true;
//        intJ=intI;
//		}
//		}
//    if(blnFound == true){
//  //   have any values changed from what is in the database?
//    if(.SubItems(1) == txtEstRate.Text &&                        .SubItems(2) == format()(DTPActReinvestedDate.Value, "mm/dd/yyyy") &&                        .SubItems(3) == txtActRate.Text &&                        .SubItems(4) == txtActShares.Text &&                        .SubItems(5) == txtActDollars.Text){
//  //   ATMA Commented .SubItems(6) = txtNAVUnaudited.Text And _
//                         ATMA Commented .SubItems(7) = Format(DTPActAppliedDate.Value, "mm/dd/yyyy") And _
//                         ATMA Commented .SubItems(8) = txtNAVAudited.Text Then
//    MsgBox("No dividend or NAV data values have changed.");
//		}
//  //   have the dividend values changed?
//    if(.SubItems(1) == txtEstRate.Text &&                        .SubItems(2) == format()(DTPActReinvestedDate.Value, "mm/dd/yyyy") &&                        .SubItems(3) == txtActRate.Text &&                        .SubItems(4) == txtActShares.Text &&                        .SubItems(5) == txtActDollars.Text &&                        .SubItems(7) == format()(DTPActAppliedDate.Value, "mm/dd/yyyy")){
//        .SubItems(10)="N";
//		}
//   } else{
//        .SubItems(10)="U";
//		}
//  //   have the NAV values changed?
//    if(.SubItems(6) == txtNAVUnaudited.Text &&                        .SubItems(8) == txtNAVAudited.Text){
//        .SubItems(11)="N";
//		}
//   } else{
//  //   if subitems(11) in the listview is blank this means the NAV
//  //   was not found and needs to be added. If it is not blank then
//  //   this is an update to the NAV values
//    if(.SubItems(11) == "" Or .SubItems(11) == "N"){
//    if(MblnNAVFound == true){
//        .SubItems(11)="U";
//		}
//   } else{
//    if(txtNAVAudited.Text > ""){
//        .SubItems(11)="A";
//		}
//		}
//		}
//   } else{
//        .SubItems(11)="U";
//		}
//		}
//  //  refresh listview values
//    if(Abs(MstrEstRate) != 0){
//        .SubItems(1)=MstrEstRate;
//		}
//   } else{
//        .SubItems(1)="";
//		}
//        .SubItems(2)=format()(DTPActReinvestedDate.Value, "mm/dd/yyyy");
//    if(Abs(MstrActRate) != 0){
//        .SubItems(3)=MstrActRate;
//		}
//   } else{
//    if(txtActRate.Text > ""){
//        .SubItems(3)="0";
//		}
//   } else{
//        .SubItems(3)="";
//		}
//		}
//    if(Abs(MstrActShares) != 0){
//        .SubItems(4)=format()(MstrActShares, "0.000");
//		}
//   } else{
//    if(txtActShares.Text > ""){
//        .SubItems(4)="0.000";
//		}
//   } else{
//        .SubItems(4)="";
//		}
//		}
//    if(Abs(MstrActDollars) != 0){
//        .SubItems(5)=format()(MstrActDollars, "0.00");
//		}
//   } else{
//    if(txtActDollars.Text > ""){
//        .SubItems(5)="0.00";
//		}
//   } else{
//        .SubItems(5)="";
//		}
//		}
//        .SubItems(6)=format()(txtNAVUnaudited.Text, "0.00##");
//        .SubItems(7)=format()(DTPActAppliedDate.Value, "mm/dd/yyyy");
//        .SubItems(8)=format()(txtNAVAudited.Text, "0.00##");
//        .cmdSave=true;
//		}
//   } else{
//    if(.txtEstRate.Text > ""){
//    if(format()(.DTPExDate.Value, "mm/dd/yyyy") == format()(Now, "mm/dd/yyyy")){
//		}
//   } else{
//    MsgBox("estimated dividend rate can only be entered for " &                        "the current date." & vbCrLf & "Changes cannot be saved.");
//		}
//		}
//        intJ=intI;
//        .SubItems(1)=txtEstRate.Text;
//        .SubItems(2)=format()(DTPActReinvestedDate.Value, "mm/dd/yyyy");
//        .SubItems(3)=txtActRate.Text;
//        .SubItems(4)=format()(txtActShares.Text, "0.000");
//        .SubItems(5)=format()(txtActDollars.Text, "0.00");
//        .SubItems(6)=format()(txtNAVUnaudited.Text, "0.00##");
//        .SubItems(7)=format()(DTPActAppliedDate.Value, "mm/dd/yyyy");
//        .SubItems(8)=format()(txtNAVAudited.Text, "0.00##");
//        .SubItems(10)="A";
//  //   if subitems(11) in the listview is blank this means the NAV
//  //   was not found and needs to be added. If it is not blank then
//  //   this is an update to the NAV values
//    if(.SubItems(11) == "" Or .SubItems(11) == "N"){
//    if(MblnNAVFound == true){
//        .SubItems(11)="U";
//		}
//   } else{
//    if(txtNAVAudited.Text > ""){
//        .SubItems(11)="A";
//		}
//		}
//		}
//   } else{
//        .SubItems(11)="U";
//		}
//        .cmdSave=true;
//		}
//        mblnClearPressed=false;
//    cmdclearClick(frmdivdmaintBOReq);
//        mblnClearPressed=true;
//        cboEstTypeCd.ListIndex=-1;
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdrefreshclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdrefreshclick()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method cmdsaveclick
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> cmdsaveclick(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdsaveclick()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//Integer intI;
//String strSQL;
//Integer intRecsEffected;
//Integer intDivRecsUpdated;
//Integer intDivRecsAdded;
//Integer intNAVRecsUpdated;
//Integer intNAVRecsAdded;
//String strMessage;
//String strNAV;
//ADODB.Recordset rstNextSeq;
//ADODB.Recordset rstAllMIPs;
//Double dblSeq;
//Double dblCurrMipSeq;
//String strSQL2;
//        strSQL=vbNullString;
//        strSQL2=vbNullString;
//  //   this is treated as a transaction because there are multiple record types that
//  //   can be added or updated with this process.  Once all transactions have been
//  //   processed then the transaction will be committed to the database
//    if(lvwDividend.ListItems(1).SubItems(3) == ""            && lvwDividend.ListItems(1).SubItems(1) != ""){
//  //  The ACTUALs column is blank, so we are entering ESTIMATED RATES
//  //  These rates will be recorded for each MIP that shares the CUSIP ID with the
//  //  currently selected MIP
//        strSQL2=" pl2.CUSIP_ID IN (SELECT pl1.CUSIP_ID " +                            "FROM rp_modified_investment_pool pl1 " +                           "WHERE pl1.RP_MIP_SEQ = " + .cboMIPSeq.Text + ")";
//		}
//   } else{
//  //  There is an ACTUAL RATE entered, so we will only store the data for the
//  //  currently selected MIP
//        strSQL2=" pl2.RP_MIP_SEQ = " + .cboMIPSeq.Text;
//		}
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdsaveClick1(frmdivdmaintBOReq);
//  //  MsgBox rstAllMIPs.RecordCount & " MIPs Found."
//    cn(.getBegintrans());
//    for(StringIntI = 1; .lvwDividend.ListItems.Count; i++){
//    if(.SubItems(10) == "U"){
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdsaveClick2(frmdivdmaintBOReq);
//    if(.SubItems(1) != ""){
//        strSQL=strSQL + .SubItems(1);
//		}
//   } else{
//        strSQL=strSQL + "null";
//		}
//    if(.SubItems(2) != ""){
//        strSQL=strSQL + ", dividend_reinvstd_dt = to_date('" +                            format()(.SubItems(2), "mm/dd/yyyy") + "','MM/DD/YYYY')";
//		}
//   } else{
//        strSQL=strSQL + ", dividend_reinvstd_dt = null";
//		}
//    if(.SubItems(3) != ""){
//        strSQL=strSQL + ", actual_dividend_rt = " + .SubItems(3);
//		}
//   } else{
//        strSQL=strSQL + ", actual_dividend_rt = null";
//		}
//    if(.SubItems(7) != ""){
//        strSQL=strSQL + ", dividend_applied_dt = to_date('" +                            format()(.SubItems(7), "mm/dd/yyyy") + "','MM/DD/YYYY')";
//		}
//   } else{
//        strSQL=strSQL + ", dividend_applied_dt = null";
//		}
//  //  svarghes - adding a rp_nav_dividend_src_type_cd"
//  //  08/02/2006
//        strSQL=strSQL + ", rp_nav_dividend_src_type_cd ='MANUAL_ENTERED'";
//        strSQL=strSQL + " where dividend_detail_seq = " +                        .SubItems(12);
//    cn(.getExecuteStrsql() ,intrecseffected);
//        intDivRecsUpdated=intDivRecsUpdated + intRecsEffected;
//  //   if the dividend_detail_seq from rp_mip_dividend_detail
//  //   is found then this is an update to this table.  Otherwise
//  //   the record needs to be added
//    if(.SubItems(13) > ""){
//  //  Do the following operation for each MIP
//  //  that shares the same CUSIP ID
//  //  as the MIP currently displayed on the form
//    while(rstAllMIPs.EOF){
//  //  store the current MIP_SEQ
//        dblCurrMipSeq=rstAllMIPs!rp_mip_seq;
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdsaveClick3(frmdivdmaintBOReq);
//    if(.SubItems(4) != ""){
//        strSQL=strSQL + .SubItems(4);
//		}
//   } else{
//        strSQL=strSQL + "null";
//		}
//    if(.SubItems(5) != ""){
//        strSQL=strSQL + ", dividend_share_dollar_amt = " +                                    .SubItems(5);
//		}
//   } else{
//        strSQL=strSQL + ", dividend_share_dollar_amt = null";
//		}
//        strSQL=strSQL + " where dividend_detail_seq = " +                                .SubItems(13) + " and rp_mip_seq = " + dblCurrMipSeq;
//  //   cboMIPSeq.Text
//  //  Update the records
//    cn(.getExecuteStrsql() ,intrecseffected);
//  //  Move to the next MIP in the recordset
//    rstallmips(.getMovenext());
//		}
//		}
//   } else{
//    rstallmips(.getMovefirst());
//    while(rstAllMIPs.EOF){
//  //  store the current MIP_SEQ
//        dblCurrMipSeq=rstAllMIPs!rp_mip_seq;
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdsaveClick4(frmdivdmaintBOReq);
//  //  "values (" & cboMIPSeq.Text & ", " & _
//
//    if(.SubItems(4) != ""){
//        strSQL=strSQL + .SubItems(4);
//		}
//   } else{
//        strSQL=strSQL + "null";
//		}
//    if(.SubItems(5) != ""){
//        strSQL=strSQL + ", " + .SubItems(5) + ")";
//		}
//   } else{
//        strSQL=strSQL + ", null)";
//		}
//  //  Update the records
//    cn(.getExecuteStrsql() ,intrecseffected);
//  //  Move to the next MIP in the recordset
//    rstallmips(.getMovenext());
//		}
//		}
//  //  cn.Execute strSQL, intRecsEffected
//        .SubItems(10)="N";
//		}
// }   else if(.SubItems(10) == "A"){
//  //  svarghes - adding a rp_nav_dividend_src_type_cd
//  //  08/02/2006
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdsaveClick5(frmdivdmaintBOReq);
//    if(.SubItems(1) != ""){
//        strSQL=strSQL + .SubItems(1) + ", ";
//		}
//   } else{
//        strSQL=strSQL + "null, ";
//		}
//    if(.SubItems(3) != ""){
//        strSQL=strSQL + .SubItems(3) + ", ";
//		}
//   } else{
//        strSQL=strSQL + "null, ";
//		}
//    if(.SubItems(7) != ""){
//        strSQL=strSQL + "to_date('" + format()(.SubItems(7), "mm/dd/yyyy") + "','MM/DD/YYYY') , ";
//		}
//   } else{
//        strSQL=strSQL + "null, ";
//		}
//    if(.SubItems(2) != ""){
//        strSQL=strSQL + "to_date('" + format()(.SubItems(2), "mm/dd/yyyy") + "','MM/DD/YYYY') , ";
//		}
//   } else{
//        strSQL=strSQL + "null, ";
//		}
//  //  svarghes - adding a RP_Dividend_Src_priority_seq
//  //  08/02/2006
//        strSQL=strSQL + "'MANUAL_ENTERED')";
//    cn(.getExecuteStrsql() ,intrecseffected);
//        intDivRecsAdded=intDivRecsAdded + intRecsEffected;
//  //   the dividend_detail_seq from dividend_detail
//  //   must be retrieved from the record that was just added so
//  //   it can be used to add the record for rp_mip_dividend_detail
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdsaveClick6(frmdivdmaintBOReq);
//        dblSeq=rstNextSeq!dividend_detail_seq;
//  //  Now insert an RP_MIP_DIVIDEND_DETAIL record for
//  //  each MIP that shares the CUSIP_ID with the current fund
//  //  that is displayed on the form.
//    rstallmips(.getMovefirst());
//    while(rstAllMIPs.EOF){
//        dblCurrMipSeq=rstAllMIPs!rp_mip_seq;
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdsaveClick7(frmdivdmaintBOReq);
//    if(.SubItems(4) != ""){
//        strSQL=strSQL + .SubItems(4);
//		}
//   } else{
//        strSQL=strSQL + "null";
//		}
//    if(.SubItems(5) != ""){
//        strSQL=strSQL + ", " + .SubItems(5) + ")";
//		}
//   } else{
//        strSQL=strSQL + ", null)";
//		}
//  //  Insert the record
//    cn(.getExecuteStrsql() ,intrecseffected);
//  //  Move to the next MIP_SEQ
//    rstallmips(.getMovenext());
//		}
//    rstnextseq(.getClose());
//        .SubItems(10)="N";
//		}
//  //  Close the recordset of MIPs
//  //  rstAllMIPs.Close
//    if(.SubItems(11) == "U"){
//  //  Non-zero/non-null check of MstrAudited added by rsmith1 01/21/2009
//    if(MstrAudited != "" && MstrAudited != 0){
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdsaveClick8(frmdivdmaintBOReq);
//    cn(.getExecuteStrsql() ,intrecseffected);
//        intNAVRecsUpdated=intNAVRecsUpdated + intRecsEffected;
//		}
//		}
// }   else if(.SubItems(11) == "A"){
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdsaveClick9(frmdivdmaintBOReq);
//    if(MstrAudited != ""){
//        strSQL=strSQL + MstrAudited + ", to_date('" +                            format()(Now, "mm/dd/yyyy") + "','MM/DD/YYYY'))";
//		}
//   } else{
//        strSQL=strSQL + "null, to_date('" +                            format()(Now, "mm/dd/yyyy") + "','MM/DD/YYYY'))";
//		}
//    cn(.getExecuteStrsql() ,intrecseffected);
//        intNAVRecsAdded=intNAVRecsAdded + intRecsEffected;
//		}
//		}
//  //  Close the recordset of MIPs
//    rstallmips(.getClose());
//    if(intDivRecsAdded == 1){
//        strMessage="1 dividend record was added." + vbCrLf;
//		}
//   } else{
//        strMessage=intDivRecsAdded + " dividend records were added." + vbCrLf;
//		}
//    if(intDivRecsUpdated == 1){
//        strMessage=strMessage + "1 dividend record was updated." + vbCrLf;
//		}
//   } else{
//        strMessage=strMessage + intDivRecsUpdated +            " dividend records were updated." + vbCrLf;
//		}
//    if(intNAVRecsAdded == 1){
//        strMessage=strMessage + "1 NAV record was added." + vbCrLf;
//		}
//   } else{
//        strMessage=strMessage + intNAVRecsAdded +            " NAV records were added." + vbCrLf;
//		}
//    if(intNAVRecsUpdated == 1){
//        strMessage=strMessage + "1 NAV record was updated.";
//		}
//   } else{
//        strMessage=strMessage + intNAVRecsUpdated + " NAV records were updated.";
//		}
//    MsgBox(strMessage);
//    if(intNAVRecsAdded > 0 Or intNAVRecsUpdated > 0){
//    MsgBox("Notify PMAD of Audited NAV");
//		}
//        .cmdSave=false;
//    cn(.getCommittrans());
//    cmdselectfundClick(frmdivdmaintBOReq);
//    MsgBox(Err.Description);
//    cn(.getRollbacktrans());
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdsaveclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdsaveclick()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method cmdselectfundclick
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> cmdselectfundclick(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdselectfundclick()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//String strSQL;
//ADODB.Recordset rstDivDetail;
//ADODB.Recordset rstInvest;
//ListItem itmDividend;
//Integer intI;
//  //   when a new fund is selected. clear out the input fields
//        .cboEstTypeCd.ListIndex=-1;
//        .DTPEstExDate.Value=format()(Now, "mm/dd/yyyy");
//        .DTPEstExDate.Value=Null;
//        .txtEstRate="";
//        .DTPActReinvestedDate.Value=.DTPExDate.Value;
//        .DTPActReinvestedDate.Value=Null;
//        .txtActRate="";
//        .txtActShares="";
//        .txtActDollars="";
//        .DTPActAppliedDate.Value=format()(Now, "mm/dd/yyyy");
//        .DTPActAppliedDate.Value=Null;
//        .txtNAVComputed="";
//        .txtNAVUnaudited="";
//        .txtNAVAudited="";
//  //   read the dividend records for the selected date
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdselectfundClick1(frmdivdmaintBOReq);
//  //   populate the listview with the dividend record(s) retrieved from database
//    while(rstDivDetail.EOF){
//        intI=intI + 1;
//    if(==Null(rstDivDetail!estimated_dividend_rt)){
//        itmDividend.SubItems(1)="";
//		}
//   } else{
//        itmDividend.SubItems(1)=rstDivDetail!estimated_dividend_rt;
//		}
//    if(==Null(rstDivDetail!dividend_reinvstd_dt)){
//        itmDividend.SubItems(2)="";
//		}
//   } else{
//        itmDividend.SubItems(2)=format()(rstDivDetail!dividend_reinvstd_dt, "mm/dd/yyyy");
//  //   if there is a reinvested date, see if there is an NAV record
//frmdivdmaintBOResp = frmdivdmaintRepository.cmdselectfundClick2(frmdivdmaintBOReq);
//    if(rstInvest.BOF && rstInvest.EOF){
//        mblnNAVFound=false;
//        itmDividend.SubItems(6)="";
//        itmDividend.SubItems(8)="";
//        itmDividend.SubItems(9)="";
//        itmDividend.SubItems(11)="";
//        mstrUnauditedFromDB="";
//        mstrUnauditedDateFromDB="";
//        mstrAuditedFromDB="";
//		}
//   } else{
//        mblnNAVFound=true;
//        itmDividend.SubItems(11)="N";
//    if(==Null(rstInvest!nav_amt)){
//        itmDividend.SubItems(6)="";
//        mstrUnauditedFromDB="";
//		}
//   } else{
//        itmDividend.SubItems(6)=format()(rstInvest!nav_amt, "0.00##");
//        mstrUnauditedFromDB=format()(rstInvest!nav_amt, "0.00##");
//		}
//    if(==Null(rstInvest!audited_nav_amt)){
//        itmDividend.SubItems(8)="";
//        mstrAuditedFromDB="";
//		}
//   } else{
//        itmDividend.SubItems(8)=format()(rstInvest!audited_nav_amt, "0.00##");
//        mstrAuditedFromDB=format()(rstInvest!audited_nav_amt, "0.00##");
//		}
//    if(==Null(rstInvest!audited_nav_notified_dt)){
//        itmDividend.SubItems(9)="";
//        mstrUnauditedDateFromDB="";
//		}
//   } else{
//        itmDividend.SubItems(9)=rstInvest!audited_nav_notified_dt;
//        mstrUnauditedDateFromDB=rstInvest!audited_nav_notified_dt;
//		}
//		}
//    rstinvest(.getClose());
//		}
//    if(==Null(rstDivDetail!actual_dividend_rt)){
//        itmDividend.SubItems(3)="";
//		}
//   } else{
//        itmDividend.SubItems(3)=rstDivDetail!actual_dividend_rt;
//		}
//    if(==Null(rstDivDetail!dividend_share_nbr)){
//        itmDividend.SubItems(4)="";
//		}
//   } else{
//        itmDividend.SubItems(4)=format()(rstDivDetail!dividend_share_nbr, "0.000");
//		}
//    if(==Null(rstDivDetail!dividend_share_dollar_amt)){
//        itmDividend.SubItems(5)="";
//		}
//   } else{
//        itmDividend.SubItems(5)=format()(rstDivDetail!dividend_share_dollar_amt, "0.00");
//		}
//    if(==Null(rstDivDetail!dividend_applied_dt)){
//        itmDividend.SubItems(7)="";
//		}
//   } else{
//        itmDividend.SubItems(7)=format()(rstDivDetail!dividend_applied_dt, "mm/dd/yyyy");
//		}
//  //   subitems 10 and 11 are hidden fields used to determine if dividend
//  //   updates or NAV updates occur
//        itmDividend.SubItems(10)="N";
//        itmDividend.SubItems(11)="N";
//    if(==Null(rstDivDetail!dd_dividend_detail_seq)){
//        itmDividend.SubItems(12)="";
//		}
//   } else{
//        itmDividend.SubItems(12)=rstDivDetail!dd_dividend_detail_seq;
//		}
//    if(==Null(rstDivDetail!rmdd_dividend_detail_seq)){
//        itmDividend.SubItems(13)="";
//		}
//   } else{
//        itmDividend.SubItems(13)=rstDivDetail!rmdd_dividend_detail_seq;
//		}
//    rstdivdetail(.getMovenext());
//		}
//  //   if no records are rerieved. make the label visible that indicates no
//  //   dividend records exist for the selected date
//    if(.lvwDividend.ListItems.Count > 0){
//        .lvwDividend.SelectedItem.Selected=true;
//        .lblMessage.Visible=false;
//		}
//   } else{
//        .lblMessage.Visible=true;
//        .lblMessage.ForeColor=vbRed;
//		}
//        .cmdRefresh=true;
//  //   estimated dividend rate can only be input/changed for the current date
//    if(format()(.DTPExDate.Value, "mm/dd/yyyy") == format()(Now, "mm/dd/yyyy")){
//        .txtEstRate=true;
//		}
//   } else{
//        .txtEstRate=false;
//		}
//        .cmdSave=false;
//    rstdivdetail(.getClose());
//        mblnNAVChange=false;
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdselectfundclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdselectfundclick()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method dtpactreinvesteddatechange
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> dtpactreinvesteddatechange(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: dtpactreinvesteddatechange()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   actual dollar amount, actual shares and actual dollar amount must all
  //   have a value before the Compute NAV button is enabled
//    if(VBUtilFunctions.length(txtActDollars.Text) > 0 && VBUtilFunctions.length(txtActShares.Text) > 0 &&            ! !=Null(DTPActReinvestedDate.Value)){
//        cmdComputeNAV=true;
//		}
//   } else{
//        cmdComputeNAV=false;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: dtpactreinvesteddatechange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: dtpactreinvesteddatechange()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method dtpexdatechange
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> dtpexdatechange(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: dtpexdatechange()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   both ex date and the fund combo box must have a valid value before
  //   the select fund button is enabled
//    if(==Null(.DTPExDate.Value)){
//        .cmdSelectFund=false;
//		}
// }   else if(.cboFunds.ListIndex >== 0){
//        .cmdSelectFund=true;
//		}
//   } else{
//        .cmdSelectFund=false;
//		}
//        .cmdRefresh=false;
//        .cmdSave=false;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: dtpexdatechange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: dtpexdatechange()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method formload
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> formload(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: formload()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//String strSQL;
//ADODB.Recordset rstFunds;
//ADODB.Recordset rstDivType;
//        .DTPExDate.MaxDate=Now;
//        .DTPExDate.Value=Now;
//        .DTPActAppliedDate.MaxDate=Now;
//        .DTPActReinvestedDate.MaxDate=Now;
//frmdivdmaintBOResp = frmdivdmaintRepository.formLoad1(frmdivdmaintBOReq);
//  //   populate the fund combo box as well as the hidden combo box that has the
//  //   e_invst_instrument_seq values corresponding to these funds
//    while(rstFunds.EOF){
//    rstfunds(.getMovenext());
//		}
//    rstfunds(.getClose());
//frmdivdmaintBOResp = frmdivdmaintRepository.formLoad2(frmdivdmaintBOReq);
//  //   populate the dividend type combo box
//    while(rstDivType.EOF){
//    rstdivtype(.getMovenext());
//		}
//    rstdivtype(.getClose());
//    cmdclearClick(frmdivdmaintBOReq);
//        mblnClearPressed=true;
//        .cboEstTypeCd.ListIndex=-1;
//        .cmdRefresh=false;
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: formload()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: formload()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method formunload
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> formunload(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: formunload()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: formunload()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: formunload()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method lvwdividenditemclick
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> lvwdividenditemclick(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: lvwdividenditemclick()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//clsUtilities utl;
  //   if an item is selected from the listview, populate the fields below it
  //   with the values from the line selected
//    utl(.getSetcombo().getCboesttypecd() ,item.getText());
//        .DTPEstExDate.Value=.DTPExDate.Value;
//    if(.lvwDividend.SelectedItem.SubItems(1) > ""){
//        .txtEstRate=.lvwDividend.SelectedItem.SubItems(1);
//        mstrEstRate=.lvwDividend.SelectedItem.SubItems(1);
//		}
//   } else{
//        .txtEstRate="";
//        mstrEstRate=0;
//		}
//    if(.lvwDividend.SelectedItem.SubItems(2) > ""){
//        .DTPActReinvestedDate.Value=.lvwDividend.SelectedItem.SubItems(2);
//		}
//   } else{
//        .DTPActReinvestedDate.Value=.DTPExDate.Value;
//        .DTPActReinvestedDate.Value=Null;
//		}
//    if(.lvwDividend.SelectedItem.SubItems(3) > ""){
//        .txtActRate=.lvwDividend.SelectedItem.SubItems(3);
//        mstrActRate=.lvwDividend.SelectedItem.SubItems(3);
//		}
//   } else{
//        .txtActRate="";
//        mstrActRate=0;
//		}
//    if(.lvwDividend.SelectedItem.SubItems(4) > ""){
//        .txtActShares=format()(.lvwDividend.SelectedItem.SubItems(4), "0.000");
//        mstrActShares=format()(.lvwDividend.SelectedItem.SubItems(4), "0.000");
//		}
//   } else{
//        .txtActShares="";
//        mstrActShares=0;
//		}
//    if(.lvwDividend.SelectedItem.SubItems(5) > ""){
//        .txtActDollars=format()(.lvwDividend.SelectedItem.SubItems(5), "0.00");
//        mstrActDollars=format()(.lvwDividend.SelectedItem.SubItems(5), "0.00");
//		}
//   } else{
//        .txtActDollars="";
//        mstrActDollars=0;
//		}
//    if(MstrActShares == 0){
//        .txtNAVComputed="000.00";
//		}
//   } else{
//        .txtNAVComputed=format()(MstrActDollars / MstrActShares, "0.00##");
//		}
//    if(.lvwDividend.SelectedItem.SubItems(6) > ""){
//        .txtNAVUnaudited=format()(.lvwDividend.SelectedItem.SubItems(6), "0.00##");
//        mstrUnaudited=format()(.lvwDividend.SelectedItem.SubItems(6), "0.00##");
//		}
//   } else{
//        .txtNAVUnaudited="";
//        mstrUnaudited=0;
//		}
//        .DTPActAppliedDate.Value=.lvwDividend.SelectedItem.SubItems(7);
//    if(.lvwDividend.SelectedItem.SubItems(8) > ""){
//        .txtNAVAudited=format()(.lvwDividend.SelectedItem.SubItems(8), "0.00##");
//        mstrAudited=format()(.lvwDividend.SelectedItem.SubItems(8), "0.00##");
//		}
//   } else{
//        .txtNAVAudited="";
//        mstrAudited=0;
//		}
//        .cmdRefresh=false;
//  //   actual dollars and actual shares both must have a value for the
//  //   ComputeNAV command button to be enabled
//    if(VBUtilFunctions.length(.txtActDollars.Text) > 0 && VBUtilFunctions.length(.txtActShares.Text) > 0){
//        .cmdComputeNAV=true;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: lvwdividenditemclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: lvwdividenditemclick()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtactdollarschange
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtactdollarschange(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtactdollarschange()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   actual dollar amount, actual shares and actual dollar amount must all
  //   have a value before the Compute NAV button is enabled
//    if(VBUtilFunctions.length(txtActDollars.Text) > 0 && VBUtilFunctions.length(txtActShares.Text) > 0 &&        ! !=Null(DTPActReinvestedDate.Value)){
//        cmdComputeNAV=true;
//		}
//   } else{
//        cmdComputeNAV=false;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtactdollarschange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtactdollarschange()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtactdollarsgotfocus
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtactdollarsgotfocus(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtactdollarsgotfocus()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//        .SelStart=0;
//        .SelVBUtilFunctions.lengthgth=99;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtactdollarsgotfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtactdollarsgotfocus()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtactdollarskeypress
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtactdollarskeypress(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtactdollarskeypress()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   on allow certain keys to be pressed
//        keyAscii=ForceDollar(KeyAscii);
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtactdollarskeypress()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtactdollarskeypress()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtactdollarslostfocus
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtactdollarslostfocus(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtactdollarslostfocus()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //  ***************************************************************************
  //  Developer: Paul Van Dyke
  //  Comments:  After the transaction amount field loses the focus, validate that
  //             a proper actual dollar amount has been entered.
  //  Arguments: None
  //  Returns:   None
  //  ***************************************************************************
//Integer intI;
//Integer intStart;
//Integer intDecimal;
//Integer intBeforeDecimal;
//        mstrActDollars="";
//    if(.Text > ""){
//    if(==Numeric(.Text)){
//		}
//   } else{
//    MsgBox("Actual dollars is not a valid amount!");
//		}
//        intI=1;
//    while(intI > Len(.Text)){
//    if(intStart > 0){
//    if(==Numeric(Mid(.Text, intI, 1))){
//        intDecimal=intDecimal + 1;
//        mstrActDollars=MstrActDollars + Mid(.Text, intI, 1);
//		}
//		}
// }   else if(Mid(.Text, intI, 1) == "."){
//        intStart=intI;
//        mstrActDollars=MstrActDollars + ".";
//		}
// }   else if(==Numeric(Mid(.Text, intI, 1))){
//        intBeforeDecimal=intBeforeDecimal + 1;
//        mstrActDollars=MstrActDollars + Mid(.Text, intI, 1);
//		}
//        intI=intI + 1;
//		}
//    if(intBeforeDecimal > 9){
//    MsgBox("actual dollars can have only 9 digits before the decimal");
//		}
//    if(intDecimal > 2){
//    MsgBox("actual dollars can have only 2 digits after the decimal");
//		}
//		}
//    if(MstrActDollars == ""){
//        mstrActDollars="0";
//		}
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtactdollarslostfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtactdollarslostfocus()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtactrategotfocus
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtactrategotfocus(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtactrategotfocus()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//        .SelStart=0;
//        .SelVBUtilFunctions.lengthgth=99;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtactrategotfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtactrategotfocus()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtactratekeypress
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtactratekeypress(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtactratekeypress()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   only allow certain keys to be pressed
//        keyAscii=ForceNAV(KeyAscii);
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtactratekeypress()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtactratekeypress()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtactratelostfocus
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtactratelostfocus(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtactratelostfocus()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //  ***************************************************************************
  //  Developer: Paul Van Dyke
  //  Comments:  After the transaction amount field loses the focus, validate that
  //             a proper actual rate amount has been entered.
  //  Arguments: None
  //  Returns:   None
  //  ***************************************************************************
//Integer intI;
//Integer intStart;
//Integer intDecimal;
//Integer intBeforeDecimal;
//        mstrActRate="";
//    if(.Text > ""){
//    if(==Numeric(.Text)){
  //                  If Abs(.Text) = 0 Then
  //                      MsgBox "Actual rate cannot be zero"
  //                      .SetFocus
  //                      Exit Sub
  //                  End If
//		}
//   } else{
//    MsgBox("Actual rate is not a valid rate!");
//		}
//        intI=1;
//    while(intI > Len(.Text)){
//    if(intStart > 0){
//    if(==Numeric(Mid(.Text, intI, 1))){
//        intDecimal=intDecimal + 1;
//        mstrActRate=MstrActRate + Mid(.Text, intI, 1);
//		}
//		}
// }   else if(Mid(.Text, intI, 1) == "."){
//        intStart=intI;
//        mstrActRate=MstrActRate + ".";
//		}
// }   else if(==Numeric(Mid(.Text, intI, 1))){
//        intBeforeDecimal=intBeforeDecimal + 1;
//        mstrActRate=MstrActRate + Mid(.Text, intI, 1);
//		}
//        intI=intI + 1;
//		}
//    if(intBeforeDecimal > 3){
//    MsgBox("Actual rate can have only 3 digits before the decimal");
//		}
//    if(intDecimal > 6){
//    MsgBox("Actual rate can have only 6 digits after the decimal");
//		}
//		}
//    if(MstrActRate == ""){
//        mstrActRate="0";
//		}
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtactratelostfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtactratelostfocus()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtactshareschange
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtactshareschange(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtactshareschange()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   actual dollar amount, actual shares and actual dollar amount must all
  //   have a value before the Compute NAV button is enabled
//    if(VBUtilFunctions.length(txtActDollars.Text) > 0 && VBUtilFunctions.length(txtActShares.Text) > 0 &&        ! !=Null(DTPActReinvestedDate.Value)){
//        cmdComputeNAV=true;
//		}
//   } else{
//        cmdComputeNAV=false;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtactshareschange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtactshareschange()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtactsharesgotfocus
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtactsharesgotfocus(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtactsharesgotfocus()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//        .SelStart=0;
//        .SelVBUtilFunctions.lengthgth=99;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtactsharesgotfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtactsharesgotfocus()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtactshareskeypress
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtactshareskeypress(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtactshareskeypress()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   only allow certain keys to be pressed
//        keyAscii=ForceNAV(KeyAscii);
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtactshareskeypress()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtactshareskeypress()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtactshareslostfocus
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtactshareslostfocus(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtactshareslostfocus()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //  ***************************************************************************
  //  Developer: Paul Van Dyke
  //  Comments:  After the transaction amount field loses the focus, validate that
  //             a proper actual shares amount has been entered.
  //  Arguments: None
  //  Returns:   None
  //  ***************************************************************************
//Integer intI;
//Integer intStart;
//Integer intDecimal;
//Integer intBeforeDecimal;
//        mstrActShares="";
//    if(.Text > ""){
//    if(==Numeric(.Text)){
//		}
//   } else{
//    MsgBox("Actual shares is not a valid number!");
//		}
//        intI=1;
//    while(intI > Len(.Text)){
//    if(intStart > 0){
//    if(==Numeric(Mid(.Text, intI, 1))){
//        intDecimal=intDecimal + 1;
//        mstrActShares=MstrActShares + Mid(.Text, intI, 1);
//		}
//		}
// }   else if(Mid(.Text, intI, 1) == "."){
//        intStart=intI;
//        mstrActShares=MstrActShares + ".";
//		}
// }   else if(==Numeric(Mid(.Text, intI, 1))){
//        intBeforeDecimal=intBeforeDecimal + 1;
//        mstrActShares=MstrActShares + Mid(.Text, intI, 1);
//		}
//        intI=intI + 1;
//		}
//    if(intBeforeDecimal > 7){
//    MsgBox("actual shares can have only 7 digits before the decimal");
//		}
//    if(intDecimal > 3){
//    MsgBox("actual shares can have only 3 digits after the decimal");
//		}
//		}
//    if(MstrActShares == ""){
//        mstrActShares="0";
//		}
//    if(Abs(MstrActShares) == 0 Or Abs(MstrActDollars) == 0){
//        cmdComputeNAV=false;
//		}
//   } else{
//        cmdComputeNAV=true;
//		}
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtactshareslostfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtactshareslostfocus()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtestratechange
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtestratechange(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtestratechange()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//        cmdRefresh=true;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtestratechange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtestratechange()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtestrategotfocus
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtestrategotfocus(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtestrategotfocus()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//        mstrEstRateOrig=.Text;
//        .SelStart=0;
//        .SelVBUtilFunctions.lengthgth=99;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtestrategotfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtestrategotfocus()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtestratekeypress
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtestratekeypress(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtestratekeypress()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   only allow certain keys to be pressed
//        keyAscii=ForceNAV(KeyAscii);
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtestratekeypress()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtestratekeypress()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtestratelostfocus
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtestratelostfocus(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtestratelostfocus()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //  ***************************************************************************
  //  Developer: Paul Van Dyke
  //  Comments:  After the transaction amount field loses the focus, validate that
  //             a proper estimated dividend rate has been entered.
  //  Arguments: None
  //  Returns:   None
  //  ***************************************************************************
//Integer intI;
//Integer intStart;
//Integer intDecimal;
//Integer intBeforeDecimal;
//        mstrEstRate="";
//    if(.Text == MstrEstRateOrig){
//		}
// }   else if(format()(DTPExDate.Value, "mm/dd/yyyy") == format()(Now, "mm/dd/yyyy")){
//   } else{
//    MsgBox("estimated rate can only be changed for the current date");
//=MstrEstRateOrig;
//        mstrEstRate=.Text;
//		}
//    if(.Text > ""){
//    if(==Numeric(.Text)){
//  //  commented out as part of cuv automation
//  //  as per the e-mail from Katharyn 11/21/06 (svarghes)
//  //                  If Abs(.Text) = 0 Then
//  //                      MsgBox "Estimated rate cannot be zero"
//  //                      .SetFocus
//  //                      Exit Sub
//  //                  End If
//		}
//   } else{
//    MsgBox("Estimated rate is not a valid number!");
//		}
//        intI=1;
//    while(intI > Len(.Text)){
//    if(intStart > 0){
//    if(==Numeric(Mid(.Text, intI, 1))){
//        intDecimal=intDecimal + 1;
//        mstrEstRate=MstrEstRate + Mid(.Text, intI, 1);
//		}
//		}
// }   else if(Mid(.Text, intI, 1) == "."){
//        intStart=intI;
//        mstrEstRate=MstrEstRate + ".";
//		}
// }   else if(==Numeric(Mid(.Text, intI, 1))){
//        intBeforeDecimal=intBeforeDecimal + 1;
//        mstrEstRate=MstrEstRate + Mid(.Text, intI, 1);
//		}
//        intI=intI + 1;
//		}
//    if(intBeforeDecimal > 3){
//    MsgBox("Estimated rate can have only 3 digits before the decimal");
//		}
//    if(intDecimal > 6){
//    MsgBox("Estimated rate can have only 6 digits after the decimal");
//		}
//		}
//    if(MstrEstRate == ""){
//        mstrEstRate="0";
//		}
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtestratelostfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtestratelostfocus()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtnavauditedchange
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtnavauditedchange(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtnavauditedchange()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   this is a module level boolean variable to indicate whether
  //   NAV values have changed
//    if(MstrAuditedFromDB == txtNAVAudited.Text){
//		}
//   } else{
//        mblnNAVChange=true;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtnavauditedchange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtnavauditedchange()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtnavauditedgotfocus
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtnavauditedgotfocus(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtnavauditedgotfocus()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
//        .SelStart=0;
//        .SelVBUtilFunctions.lengthgth=99;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtnavauditedgotfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtnavauditedgotfocus()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtnavauditedkeypress
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtnavauditedkeypress(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtnavauditedkeypress()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //   only allow certain keys to be pressed
//        keyAscii=ForceNAV(KeyAscii);
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtnavauditedkeypress()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtnavauditedkeypress()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }
	/**
	 * Method txtnavauditedlostfocus
	 * @param frmdivdmaintBOReq
	 * @return frmdivdmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmDivdMaintBO> txtnavauditedlostfocus(FrmDivdMaintBO frmdivdmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtnavauditedlostfocus()"+"argument : "+frmdivdmaintBOReq); 
	      List<FrmDivdMaintBO> frmdivdmaintBOResp = null;
	      try{
	          frmdivdmaintBOResp =  new ArrayList<FrmDivdMaintBO>();   
  //  ***************************************************************************
  //  Developer: Paul Van Dyke
  //  Comments:  After the transaction amount field loses the focus, validate that
  //             a proper nav amount has been entered.
  //  Arguments: None
  //  Returns:   None
  //  ***************************************************************************
//Integer intI;
//Integer intStart;
//Integer intDecimal;
//Integer intBeforeDecimal;
//        mstrAudited="";
//    if(.Text > ""){
//    if(==Numeric(.Text)){
  //  Code turned off by rsmith1 01/27/2009 as per David Moriwaki
  //                  If Abs(.Text) = 0 Then
  //                      MsgBox " Audited value cannot be zero"
  //                      .SetFocus
  //                      Exit Sub
  //                  End If
//		}
//   } else{
//    MsgBox("Audited Value is not a valid NAV Amount!");
//		}
//        intI=1;
//    while(intI > Len(.Text)){
//    if(intStart > 0){
//    if(==Numeric(Mid(.Text, intI, 1))){
//        mstrAudited=MstrAudited + Mid(.Text, intI, 1);
//        intDecimal=intDecimal + 1;
//		}
//		}
// }   else if(Mid(.Text, intI, 1) == "."){
//        intStart=intI;
//        mstrAudited=MstrAudited + ".";
//		}
// }   else if(==Numeric(Mid(.Text, intI, 1))){
//        mstrAudited=MstrAudited + Mid(.Text, intI, 1);
//        intBeforeDecimal=intBeforeDecimal + 1;
//		}
//        intI=intI + 1;
//		}
//    if(intBeforeDecimal > 11){
//    MsgBox("Audited value can have only 11 digits before the decimal");
//		}
//    if(intDecimal > 4){
//    MsgBox("Audited value can have only 4 digits after the decimal");
//		}
//		}
//    if(MstrAudited == ""){
//        mstrAudited="0";
//		}
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtnavauditedlostfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtnavauditedlostfocus()"+"return : "+frmdivdmaintBOResp);
        return frmdivdmaintBOResp;
        }

}