package com.sic.tasa.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sic.tasa.dataobject.FrmSEIMaintBO;
import com.sic.tasa.exceptions.TASABusinessException;
import com.sic.tasa.exceptions.TASADataAccessException;
import com.sic.tasa.repositories.IFrmSEIMaintRepository;
import com.sic.tasa.service.IFrmSEIMaintService;
import com.sic.tasa.util.AtmaLogger;


/*************************************************************************
 * 
 * sic CONFIDENTIAL
 * _________________________________________________________________________________
 * 
 * sic is a trademark of sic Company.
 *
 * Copyright ? 2017 sic. All rights reserved.
 * 
 * NOTICE: All information contained herein is, and remains the property of sic
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to sic and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from sic.
 *
 *************************************************************************/
// Author : Generated by ATMA ?
// Revision History :  


@Service
public class FrmSEIMaintServiceImpl implements  IFrmSEIMaintService{

	private static final AtmaLogger LOGGER = AtmaLogger.create(FrmSEIMaintServiceImpl.class);

	@Autowired
	private IFrmSEIMaintRepository frmseimaintRepository;

	public void setFrmSEIMaintRepository(IFrmSEIMaintRepository frmseimaintRepository) {
		this.frmseimaintRepository = frmseimaintRepository;
	}

	public List<FrmSEIMaintBO> formload(FrmSEIMaintBO frmseimaintBOReq) throws TASABusinessException{
		LOGGER.debug("Entering into the method: formload()"+"argument : "+frmseimaintBOReq); 
		List<FrmSEIMaintBO> frmseimaintBOResp = new ArrayList<FrmSEIMaintBO>();
		try{


//			frmseimaintBOResp.setCBOFunds(frmseimaintBOReq.getCBOFunds());
//
//			frmseimaintBOResp.setCBOMIPSeq(frmseimaintBOReq.getCBOMIPSeq());
			
			frmseimaintBOResp = frmseimaintRepository.formLoad1(frmseimaintBOReq);
			
		}catch (Exception ex){
			LOGGER.error("Error occurred in method: formload()"+"and terminated due to " + ex.getMessage());
			throw new TASABusinessException(ex);
		}
		LOGGER.debug("Exiting the method: formload()"+"return : "+frmseimaintBOResp);
		return frmseimaintBOResp;
	}

	public List<FrmSEIMaintBO> cbofundsclick(FrmSEIMaintBO frmseimaintBOReq) throws TASABusinessException {
		List <FrmSEIMaintBO> frmseimaintBOResp = null;

		try{
			frmseimaintBOResp = frmseimaintRepository.cbofundsClick1(frmseimaintBOReq);
//			 TODO Handle in Angular
			
			
//			Set rstDivRate = cn.Execute(strSQL)
//			        .lvwDivdReturnRate.ListItems.Clear
//			        MstrPrevDate = Format(Now - 1, "mm/dd/yyyy")
//			        MstrTwoDaysAgo = Format(Now - 2, "mm/dd/yyyy")
//			        MstrPrevRate = "0"
//
//			        Do Until rstDivRate.EOF
//			            intCounter = intCounter + 1
//			        
//			            ' Previous business day's as of date and the rate
//			            ' as well as the business day before the previous day are needed
//			            ' to calculate the daily_int_factor_nbr
//			            
//			            If intCounter = 1 And Format(rstDivRate!as_of_dt, "yyyymmdd") < _
//			                    Format(Now, "yyyymmdd") Then
//			                blnTodayFound = True
//			            End If
//			                    
//			            If blnYesterdayFound = True Then
//			                MstrTwoDaysAgo = Format(rstDivRate!as_of_dt, "mm/dd/yyyy")
//			                blnYesterdayFound = False
//			            ElseIf blnTodayFound = True Then
//			                MstrPrevDate = Format(rstDivRate!as_of_dt, "mm/dd/yyyy")
//			                MstrPrevRate = rstDivRate!daily_return_rt
//			                blnTodayFound = False
//			                blnYesterdayFound = True
//			            ElseIf Format(rstDivRate!as_of_dt, "mm/dd/yyyy") = _
//			                    Format(Now, "mm/dd/yyyy") Then
//			                blnTodayFound = True
//			            End If
//			            
//			            Set itmDivRate = .lvwDivdReturnRate.ListItems.Add(, , _
//			                Format(rstDivRate!as_of_dt, "mm/dd/yyyy"))
//			            itmDivRate.SubItems(1) = rstDivRate!daily_return_rt
//			            
//			            If IsNull(rstDivRate!daily_int_factor_nbr) Then
//			                itmDivRate.SubItems(2) = ""
//			            Else
//			                itmDivRate.SubItems(2) = rstDivRate!daily_int_factor_nbr
//			            End If
//			            
//			            If IsNull(rstDivRate!appld_rt_days_nbr) Then
//			                itmDivRate.SubItems(3) = ""
//			            Else
//			                itmDivRate.SubItems(3) = rstDivRate!appld_rt_days_nbr
//			            End If
//			            
//			            itmDivRate.SubItems(4) = "N"
//			            rstDivRate.MoveNext
//			        Loop
//			        
//			Finalize_Display:
//
//			        If .lvwDivdReturnRate.ListItems.Count > 0 Then
//			            .lvwDivdReturnRate.SelectedItem.Selected = True
//			            
//			            ' if there are items in the listview, populate the input field
//			            ' values with the first item in the list
//			            .DTPEstExDate.Value = .lvwDivdReturnRate.ListItems(1).Text
//			            .txtEstRate.Text = .lvwDivdReturnRate.ListItems(1).SubItems(1)
//			            .lblMessage.Visible = False
//			        Else
//			            .lblMessage.Visible = True
//			            .lblMessage.ForeColor = vbRed
//			        End If
//
//			        .cmdSave.Enabled = False
//			        rstDivRate.Close
//			        Set rstDivRate = Nothing
//			        Screen.MousePointer = vbDefault
//			    End With
//
//			    Exit Sub
//			AError:
//			    MsgBox Err.Description
//			    Screen.MousePointer = vbDefault
			
		}catch (Exception ex){
			LOGGER.error("Error occurred in method: formload()"+"and terminated due to " + ex.getMessage());
			throw new TASABusinessException(ex);
		}
		LOGGER.debug("Exiting the method: formload()"+"return : "+frmseimaintBOResp);
		return frmseimaintBOResp;
	}
	
	public List<FrmSEIMaintBO> cmdclearclick(FrmSEIMaintBO frmseimaintBOReq)
			throws TASABusinessException {

		LOGGER.debug("Entering into the method: cmdclearclick()"+"argument : "+frmseimaintBOReq); 
		List<FrmSEIMaintBO> frmseimaintBOResp = null;
		try{
			frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();
			
			cbofundsclick(frmseimaintBOReq);
//			 TODO Handle in Angular - clear all fields in UI Screen
			
			//.setText("");
		   // .setText("");
		    //.setText("");
			
			//Integer intI;
			//Integer intResponse;
			//  if(.txtEstRate.Text == ""){
			//		}
			//}   else if(!=Numeric(.txtEstRate.Text) && ! !=Null(.DTPEstExDate.Value)){
			//  for(StringIntI = 1; .lvwDivdReturnRate.ListItems.Count; i++){
			//  if(format()(.lvwDivdReturnRate.ListItems(intI).Text, "mm/dd/yyyy") ==                        format()(.DTPEstExDate.Value, "mm/dd/yyyy")){
			//  if(Abs(.txtEstRate.Text) ==                            Abs(.lvwDivdReturnRate.ListItems(intI).SubItems(1))){
			//      .txtEstRate="";
			//      .DTPEstExDate.Value=format()(Now, "mm/dd/yyyy");
			//      .DTPEstExDate.Value=Null;
			//		}
			// } else{
			//      intResponse=MsgBox("Values in Effective Date and Rate " +                            "have not been refreshed to the list above." +                            vbCrLf +                            "Would you like to do so?", vbYesNo);
			//  if(intResponse == vbNo){
			//      .txtEstRate="";
			//      .DTPEstExDate.Value=format()(Now, "mm/dd/yyyy");
			//      .DTPEstExDate.Value=Null;
			//		}
			// } else{
			//  cmdrefreshClick(frmseimaintBOReq);
			//		}
			//		}
			//		}
			//		}
			//		}
		}catch (Exception ex){
			LOGGER.error("Error occurred in method: cmdclearclick()"+"and terminated due to " + ex.getMessage());
			throw new TASABusinessException(ex);
		}
		LOGGER.debug("Exiting the method: cmdclearclick()"+"return : "+frmseimaintBOResp);
		return frmseimaintBOResp;

	}
		
//	/**
//	 * Method cmdcloseclick
//	 * @param frmseimaintBOReq
//	 * @return frmseimaintBOResp
//	 * @throws TASATASABusinessException
//	 */
	public List<FrmSEIMaintBO> cmdcloseclick(
			FrmSEIMaintBO frmdailynavmaintenanceBOReq)
					throws TASABusinessException {
		LOGGER.debug("Entering into the method: cmdcloseclick()"
				+ "argument : " + frmdailynavmaintenanceBOReq);
		List<FrmSEIMaintBO> frmseimaintBOResp = null;
		try {
			frmseimaintBOResp = new ArrayList<FrmSEIMaintBO>();
//			 TODO Handle in Angular - clear all fields in UI Screen
		} catch (Exception ex) {
			LOGGER.error("Error occurred in method: cmdcloseclick()"
					+ "and terminated due to " + ex.getMessage());
			throw new TASABusinessException(ex);
		}
		LOGGER.debug("Exiting the method: cmdcloseclick()" + "return : "
				+ frmseimaintBOResp);
		return frmseimaintBOResp;
	}

	public List<FrmSEIMaintBO> cmdsaveClick(FrmSEIMaintBO frmseimaintBOReq) throws TASADataAccessException {
	    LOGGER.debug("Entering into the method: cmdsaveClick1 and argument : "+frmseimaintBOReq); 
	    List<FrmSEIMaintBO> frmseimaintBOResp =new ArrayList<FrmSEIMaintBO>();
	    
	    try {
	    //	TODO Handle in Angular - clear all fields in UI Screen
	      
	    }catch (Exception ex) {
            LOGGER.error("Error occurred in method: cmdsaveClick1()" +"and terminated due to " + ex.getMessage());
            throw new TASADataAccessException(ex);
        }        
        LOGGER.debug("Exiting the method: cmdsaveClick1()"+"return : "+frmseimaintBOResp);
         return frmseimaintBOResp;
    }

	@Override
	public List<FrmSEIMaintBO> cmdsaveclick(FrmSEIMaintBO frmseimaintBOReq) throws TASABusinessException {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * Method cmdrefreshclick
	 * @param frmseimaintBOReq
	 * @return frmseimaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmSEIMaintBO> cmdrefreshclick(FrmSEIMaintBO frmseimaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdrefreshclick()"+"argument : "+frmseimaintBOReq); 
	      List<FrmSEIMaintBO> frmseimaintBOResp = null;
	      try{
	          frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();  
	          
	       // TODO Auto-generated method stub
//Integer intI;
//Integer intJ;
//Boolean blnFound;
//ListItem itmDivRate;
//String strEstRate;
//Double dblFactor;
//adodb.Command cmdFunction;
//adodb.Command cmdFunction2;
//adodb.Command cmdFunction3;
//String strFirstOfThisMonth;
//String strLastOfLastMonth;
//Integer intNumberOfDays;
//Integer intMonth;
//Integer intDay;
//Integer intYear;
//Variant varNextMonth;
//String strDate;
//String strRPD489Date;
//String strRPD423Date;
//String strRPD423Date2;
//Variant varDate;
//String strSQL;
//adodb.Recordset rs;
//String weekendInd;
//    if(.txtEstRate.Text == ""){
//    MsgBox("Rate cannot be blank");
//		}
//        intJ=0;
//    for(StringIntI = 1; .lvwDivdReturnRate.ListItems.Count; i++){
//    if(format()(.DTPEstExDate.Value, "mm/dd/yyyy") ==                    .lvwDivdReturnRate.ListItems(intI).Text){
//        blnFound=true;
//        intJ=intI;
//        strEstRate=.lvwDivdReturnRate.ListItems(intI).SubItems(1);
//    if((.txtEstRate.Text == "" && strEstRate == "") Or                        (Abs(.txtEstRate.Text) == 0 && strEstRate == "")){
//		}
// }   else if(strEstRate > ""){
//    if(Abs(.txtEstRate.Text) == Abs(strEstRate)){
//    MsgBox("No changes have been made");
//    if(format()(.DTPEstExDate.Value, "mm/dd/yyyy") ==                                format()(Now, "mm/dd/yyyy")){
//		}
//   } else{
//		}
//		}
// }   else if(format()(.DTPEstExDate.Value, "mm/dd/yyyy") ==                            format()(Now, "mm/dd/yyyy")){
//   } else{
//    MsgBox("Rate can only be entered for " &                            "the current date." & vbCrLf & "Changes cannot be saved.");
//		}
//		}
//		}
//		}
//    if(blnFound == true){
//  //  Updating an item in the listview
//    if(Abs(MstrEstRate) != 0){
//        .SubItems(1)=MstrEstRate;
//		}
//   } else{
//        .SubItems(1)="";
//		}
//    if(.SubItems(4) == "N"){
//        .SubItems(4)="U";
//		}
//        .cmdSave=true;
//		}
//   } else{
//  //  Adding a new item to the ListView
//        intJ=intI;
//        .SubItems(1)=txtEstRate.Text;
//        .SubItems(4)="A";
//        .cmdSave=true;
//		}
//    if(Month(MstrPrevDate) == Month(Now)){
//        dblFactor=MstrPrevRate *                DateDiff("d", MstrPrevDate, Now);
//        .lvwDivdReturnRate.ListItems(intJ).SubItems(2)=dblFactor;
//		}
//   } else{
//        .lvwDivdReturnRate.ListItems(intJ).SubItems(2)="0";
//		}
//        .CommandText="RPD489";
//        .CommandType=adCmdStoredProc;
//        .ActiveConnection=cn;
//    cmdfunction(.getExecute());
//        strRPD489Date=format()(cmdFunction(0), "mm/dd/yyyy");
//        .CommandText="RPD423";
//        .CommandType=adCmdStoredProc;
//        .ActiveConnection=cn;
//        strDate=DTPEstExDate.Month + "/01/" + DTPEstExDate.Year;
//        varDate=DateAdd("d", -1, strDate);
//    cmdfunction2(.getExecute());
//        strRPD423Date=format()(cmdFunction2(0), "mm/dd/yyyy");
//  //  if weekend_ind = "N" means, the interest rate has the weekend, holiday
//  //  factor included, so no need to multiply by the number of weekend/holidays
//  //  if "W", need to calculate the number of weekend/holidays
//frmseimaintBOResp = frmseimaintRepository.cmdrefreshClick1(frmseimaintBOReq);
//    if(! rs.EOF){
//        weekendInd=rs("weekend_ind");
//		}
//    if(weekendInd == "N"){
//        intNumberOfDays=1;
//		}
// }   else if(weekendInd == "W"){
//  //   need to calculate the weekend/holidays
//        .CommandText="RPD423";
//        .CommandType=adCmdStoredProc;
//        .ActiveConnection=cn;
//    cmdfunction3(.getExecute());
//        strRPD423Date2=format()(cmdFunction3(0), "mm/dd/yyyy");
//    if(format()(.DTPEstExDate.Value, "mm/dd/yyyy") == strRPD489Date){
//        varNextMonth=DateAdd("m", 1, .DTPEstExDate.Value);
//        intMonth=format()(varNextMonth, "mm");
//        intYear=format()(varNextMonth, "yyyy");
//        strFirstOfThisMonth=intMonth + "/01/" + intYear;
//        intNumberOfDays=DateDiff("d", .DTPEstExDate.Value, strFirstOfThisMonth);
//		}
// }   else if(format()(.DTPEstExDate.Value, "mm/dd/yyyy") == strRPD423Date){
//        strLastOfLastMonth=DateAdd("d", -1, strDate);
//        intNumberOfDays=DateDiff("d", strLastOfLastMonth, strRPD423Date2) - 1;
//		}
//   } else{
//        intNumberOfDays=DateDiff("d", .DTPEstExDate.Value, strRPD423Date2);
//		}
//		}
//        .lvwDivdReturnRate.ListItems(intJ).SubItems(3)=intNumberOfDays;
//  //  Sort the listview DECENDING by the AS_OF_DATE
//        .lvwDivdReturnRate.SortKey=0;
//        .lvwDivdReturnRate.SortOrder=lvwDescending;
//        .lvwDivdReturnRate.Sorted=true;
//    cmdclearClick(frmseimaintBOReq);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdrefreshclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdrefreshclick()"+"return : "+frmseimaintBOResp);
        return frmseimaintBOResp;
        }

    public List<FrmSEIMaintBO> dtpestexdatechange(FrmSEIMaintBO frmseimaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: dtpestexdatechange()"+"argument : "+frmseimaintBOReq); 
	      List<FrmSEIMaintBO> frmseimaintBOResp = null;
	      try{
	          frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();
	          // TODO Auto-generated method stub
//Integer intI;
//      .txtEstRate="";
//      .cmdRefresh=false;
//  for(StringIntI = 1; .lvwDivdReturnRate.ListItems.Count; i++){
//  if(format()(.DTPEstExDate.Value, "mm/dd/yyyy") ==                    .lvwDivdReturnRate.ListItems(intI).Text){
//      .txtEstRate=.lvwDivdReturnRate.ListItems(intI).SubItems(1);
//		}
//		}
//  if(format()(.DTPEstExDate.Value, "mm/dd/yyyy") == format()(Now, "mm/dd/yyyy")){
//		}
      }catch (Exception ex){
          LOGGER.error("Error occurred in method: dtpestexdatechange()"+"and terminated due to " + ex.getMessage());
          throw new TASABusinessException(ex);
      }
      LOGGER.debug("Exiting the method: dtpestexdatechange()"+"return : "+frmseimaintBOResp);
      return frmseimaintBOResp;
      }

    /**
	 * Method lvwdivdreturnrateitemclick
	 * @param frmseimaintBOReq
	 * @return frmseimaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmSEIMaintBO> lvwdivdreturnrateitemclick(FrmSEIMaintBO frmseimaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: lvwdivdreturnrateitemclick()"+"argument : "+frmseimaintBOReq); 
	      List<FrmSEIMaintBO> frmseimaintBOResp = null;
	      try{
	          frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>(); 
	          // TODO Auto-generated method stub
//clsUtilities utl;
//        .DTPEstExDate.Value=.lvwDivdReturnRate.SelectedItem.Text;
//    if(.lvwDivdReturnRate.SelectedItem.SubItems(1) > ""){
//        .txtEstRate=.lvwDivdReturnRate.SelectedItem.SubItems(1);
//        mstrEstRate=.lvwDivdReturnRate.SelectedItem.SubItems(1);
//		}
//   } else{
//        .txtEstRate="";
//        mstrEstRate=0;
//		}
//        .cmdRefresh=true;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: lvwdivdreturnrateitemclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: lvwdivdreturnrateitemclick()"+"return : "+frmseimaintBOResp);
        return frmseimaintBOResp;
        }

    public List<FrmSEIMaintBO> txtestratechange(FrmSEIMaintBO frmseimaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtestratechange()"+"argument : "+frmseimaintBOReq); 
	      List<FrmSEIMaintBO> frmseimaintBOResp = null;
	      try{
	          frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();   
//  if(VBUtilFunctions.length(txtEstRate.Text) > 0 && ! !=Null(DTPEstExDate.Value)){
//      cmdRefresh=true;
//		}
// } else{
//      cmdRefresh=false;
//		}
      }catch (Exception ex){
          LOGGER.error("Error occurred in method: txtestratechange()"+"and terminated due to " + ex.getMessage());
          throw new TASABusinessException(ex);
      }
      LOGGER.debug("Exiting the method: txtestratechange()"+"return : "+frmseimaintBOResp);
      return frmseimaintBOResp;
      }

    /**
	 * Method txtestrategotfocus
	 * @param frmseimaintBOReq
	 * @return frmseimaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmSEIMaintBO> txtestrategotfocus(FrmSEIMaintBO frmseimaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtestrategotfocus()"+"argument : "+frmseimaintBOReq); 
	      List<FrmSEIMaintBO> frmseimaintBOResp = null;
	      try{
	          frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();   
	          
	          // TODO Auto-generated method stub
//    if(format()(DTPEstExDate.Value, "mm/dd/yyyy") == format()(Now, "mm/dd/yyyy")){
//=true;
//        mstrEstRateOrig=.Text;
//        .SelStart=0;
//        .SelVBUtilFunctions.lengthgth=99;
//		}
//   } else{
//    MsgBox("Rate can only be entered for the current date");
//    dtpestexdate(.getSetfocus());
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtestrategotfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtestrategotfocus()"+"return : "+frmseimaintBOResp);
        return frmseimaintBOResp;
        }

    /**
	 * Method txtestratekeypress
	 * @param frmseimaintBOReq
	 * @return frmseimaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmSEIMaintBO> txtestratekeypress(FrmSEIMaintBO frmseimaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtestratekeypress()"+"argument : "+frmseimaintBOReq); 
	      List<FrmSEIMaintBO> frmseimaintBOResp = null;
	      try{
	          frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>(); 
	          // TODO Auto-generated method stub
	          
//        keyAscii=ForceNAV(KeyAscii);
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtestratekeypress()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtestratekeypress()"+"return : "+frmseimaintBOResp);
        return frmseimaintBOResp;
        }

    /**
	 * Method txtestratelostfocus
	 * @param frmseimaintBOReq
	 * @return frmseimaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmSEIMaintBO> txtestratelostfocus(FrmSEIMaintBO frmseimaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtestratelostfocus()"+"argument : "+frmseimaintBOReq); 
	      List<FrmSEIMaintBO> frmseimaintBOResp = null;
	      try{
	          frmseimaintBOResp =  new ArrayList<FrmSEIMaintBO>();
	          
	          //  TODO Auto-generated method stub
  
//Integer intI;
//Integer intStart;
//Integer intDecimal;
//Integer intBeforeDecimal;
//String strBeforeDecimal;
//        mstrEstRate="";
//    if(.Text > ""){
//    if(==Numeric(.Text)){
//    if(Abs(.Text) == 0){
//    MsgBox("Estimated rate cannot be zero");
//		}
//		}
//   } else{
//    MsgBox("Estimated rate is not a valid number!");
//		}
//        intI=1;
//    while(intI > Len(.Text)){
//    if(intStart > 0){
//    if(==Numeric(Mid(.Text, intI, 1))){
//        intDecimal=intDecimal + 1;
//        mstrEstRate=MstrEstRate + Mid(.Text, intI, 1);
//		}
//		}
// }   else if(Mid(.Text, intI, 1) == "."){
//        intStart=intI;
//        mstrEstRate=MstrEstRate + ".";
//		}
// }   else if(==Numeric(Mid(.Text, intI, 1))){
//        intBeforeDecimal=intBeforeDecimal + 1;
//        strBeforeDecimal=strBeforeDecimal + Mid(.Text, intI, 1);
//        mstrEstRate=MstrEstRate + Mid(.Text, intI, 1);
//		}
//        intI=intI + 1;
//		}
//    if(intBeforeDecimal > 0){
//    if(Abs(strBeforeDecimal) == 0){
//		}
//   } else{
//    MsgBox("Estimated rate must be less than 1.");
//		}
//		}
//    if(intDecimal > 9){
//    MsgBox("Estimated rate can have only 9 digits after the decimal.");
//		}
//		}
//    if(MstrEstRate == ""){
//        mstrEstRate="0";
//		}
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtestratelostfocus()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtestratelostfocus()"+"return : "+frmseimaintBOResp);
        return frmseimaintBOResp;
        }
}

