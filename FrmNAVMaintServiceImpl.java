package com.sic.tasa.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sic.tasa.dataobject.FrmNAVMaintBO;
import com.sic.tasa.exceptions.TASABusinessException;
import com.sic.tasa.repositories.IFrmNAVMaintRepository;
import com.sic.tasa.service.IFrmNAVMaintService;
import com.sic.tasa.util.AtmaLogger;

/*************************************************************************
 * 
 * SIC CONFIDENTIAL
 * _________________________________________________________________________________
 * 
 * SIC is a trademark of SIC Company.
 *
 * Copyright ? 2017 SIC. All rights reserved.
 * 
 * NOTICE: All information contained herein is, and remains the property of SIC
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to SIC and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from SIC.
 *
 *************************************************************************/
// Author : Generated by ATMA ?
// Revision History :  


@Service
public class FrmNAVMaintServiceImpl implements  IFrmNAVMaintService{

    private static final AtmaLogger LOGGER = AtmaLogger.create(FrmNAVMaintServiceImpl.class);

    @Autowired
    private IFrmNAVMaintRepository frmnavmaintRepository;

    public void setFrmNAVMaintRepository(IFrmNAVMaintRepository frmnavmaintRepository) {
        this.frmnavmaintRepository = frmnavmaintRepository;
    }


  //  svarghes 07/05/06
  //  returns the source for Value used by CUV
	/**
	 * Method getsource
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> getsource(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: getsource()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();   
//String strSQL;
//Recordset rs;
frmnavmaintBOResp = frmnavmaintRepository.getsource1(frmnavmaintBOReq);
//    if(! rs.EOF){
//        getSource=rs("DESCP");
//		}
//   } else{
//        getSource="";
//		}
//    MsgBox("Error in GetSource: " & Err.Description, vbExclamation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: getsource()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: getsource()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
  //  enables/disables the amended audited val fields and the notified date
	/**
	 * Method enabledisablefields
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> enabledisablefields(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: enabledisablefields()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	    	  // TODO Handle in Angular - clear all fields in UI Screen
	    	  
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();   
//        Me.lblAmendAudVal=bEnable;
//        Me.txtAmendAuditedVal=bEnable;
//        Me.lblReEnter=bEnable;
//        Me.txtReEnterAmendedAudVal=bEnable;
//        Me.DTPNotifiedDate=bEnable;
//        Me.lblNotifiedDate=bEnable;
//        txtAmendAuditedVal="";
//        txtReEnterAmendedAudVal="";
//        txtValUsedByCUV="";
//        me.lblSource="";
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: enabledisablefields()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: enabledisablefields()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
  //  when selecting a fund item check whether the AS OF Date is
  //  selected, if it is not null enable the select a fund button
	/**
	 * Method cbofundsclick
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> cbofundsclick(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cbofundsclick()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();   
	          
	      //    TODO Handle in Angular - clear all fields in UI Screen
  //   both fund and as of date must have values for the Select Fund
  //   command button to be enabled
   // if(==Null(.DTPAsOfDate.Value)){
//        .cmdSelectFund=false;
//		}
// }   else if(.cboFunds.ListIndex >== 0){
//        .cmdSelectFund=true;
//		}
//   } else{
//        .cmdSelectFund=false;
//		}
  //  disable the amended audited fields and the notified date fields
//    enabledisablefields(false);
//    MsgBox("Error in cboFunds_Click. " & Err.Description, vbExclamation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cbofundsclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cbofundsclick()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
  
	/**
	 * Method cmdaddclick
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> cmdaddclick(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdaddclick()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>(); 
//	        TODO Handle in Angular - clear all fields in UI Screen
//String strSQL;
//Recordset rs;
//Integer iRecAffected;
//Double amnAudVal;
//Double reEnterAmnAudVal;
//    if(Me.txtAmendAuditedVal.Text == ""){
//    MsgBox("Please enter a value for amended audited value!", vbInformation);
//    txtamendauditedval(.getSetfocus());
//		}
//    if(Me.txtReEnterAmendedAudVal.Text == ""){
//    MsgBox("Please confirm the amended audited value in the re-enter box!", vbInformation);
//		}
//  //  both amended audited value and the re-enter text values should match
//  //  to make an update/add
//        amnAudVal=CDbl(txtAmendAuditedVal.Text);
//        reEnterAmnAudVal=CDbl(Me.txtReEnterAmendedAudVal);
//    if(amnAudVal != reEnterAmnAudVal){
//    MsgBox("The amended audited value and the re-enter text should match to do any updates!", vbInformation);
//    txtreenteramendedaudval(.getSetfocus());
//		}
//  //  make sure the user selected a notified date
//    if(!=Null(Me.DTPNotifiedDate.Value)){
//    MsgBox("Please select a notified date!", vbInformation);
//		}
//  //  if there is a difference with the existing value, do an update
 //   if(MstrAmendAudited == txtAmendAuditedVal.Text && MstrNotified == Me.DTPNotifiedDate.Value){
//    MsgBox("No changes were made to the data!", vbInformation);
		
 //  } else{
frmnavmaintBOResp = frmnavmaintRepository.cmdaddClick1(frmnavmaintBOReq);
//    cn(.getExecuteStrsql() ,irecaffected);
//		}
//  //  add means update the record with amended audited amt and
//  //  notified date
//    if(cmdAdd.Caption == "ADD"){
//    if(iRecAffected > 0){
//    MsgBox("Amended audited value added successfully!", vbInformation);
//        me.txtReEnterAmendedAudVal="";
//        cmdAdd="MODIFY";
//        cmdDelete=true;
//        mstrAmendAudited=txtAmendAuditedVal.Text;
//        mstrNotified=Me.DTPNotifiedDate.Value;
//		}
//   } else{
//    MsgBox("Error in adding amended audited value!", vbInformation);
//		}
//   } else{
//  //    modify amend audited value and/or notified date
//    if(iRecAffected > 0){
//    MsgBox("Amended audited value updated successfully!", vbInformation);
//        mstrAmendAudited=txtAmendAuditedVal.Text;
//        mstrNotified=Me.DTPNotifiedDate.Value;
//        cmdDelete=true;
//        cmdAdd=true;
//		}
//   } else{
//    MsgBox("Error in updating amended audited value!", vbInformation);
//    MsgBox("Error in cmdAdd_Click. " & Err.Description, vbExclamation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdaddclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdaddclick()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
  //  closes the window
	/**
	 * Method cmdcloseclick
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> cmdcloseclick(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdcloseclick()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();   
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdcloseclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdcloseclick()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
  
	/**
	 * Method cmddeleteclick
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> cmddeleteclick(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmddeleteclick()"
	    		  				+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>(); 
//	        TODO Handle in Angular 
//String strSQL;
//Recordset rs;
//Integer answer;
//Integer iRecAffected;
//        iRecAffected=0;
frmnavmaintBOResp = frmnavmaintRepository.cmddeleteClick1(frmnavmaintBOReq);
//        answer=MsgBox("Are you sure you want to delete the amended audited value and notified date?", vbOKCancel + vbQuestion);
//    if(answer == vbOK){
//    cn(.getExecuteStrsql() ,irecaffected);
//    if(iRecAffected > 0){
//        cmdDelete=false;
//        cmdAdd="ADD";
//        me.txtAmendAuditedVal="";
//        me.txtReEnterAmendedAudVal="";
//        me.DTPNotifiedDate.Value=Null;
//		}
//		}
//    MsgBox("Error in cmdDelate_Click. " & Err.Description, vbExclamation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmddeleteclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmddeleteclick()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
  //  select a fund button click populate the details of the selected
  //  fund, such as Value used by CUV, Source, Amended audited value,
  //  and notified date. If amended value exists for the selected fund
  //  Delete button gets enabled and the caption of Add/Modify button gets
  //  changed to MODIFY. If there is no amended audited value, the caption
  //  will be ADD.
	/**
	 * Method cmdselectfundclick
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> cmdselectfundclick(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdselectfundclick()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();  
	          
	          // TODO Handle in Angular
//String strSQL;
//ADODB.Recordset rstNAVData;
//  //  enables the amended audited fields and the notified date
//    enabledisablefields(true);
//        mintFundSelect=.cboFunds.ListIndex;
//        mstrFundSelect=.cboFunds.Text;
//        mdteAsOf=format()(.DTPAsOfDate.Value, "mm/dd/yyyy");
//        .txtReEnterAmendedAudVal="";
//        .txtAmendAuditedVal="";
//        .DTPNotifiedDate.MinDate=format()(.DTPAsOfDate.Value + 1, "mm/dd/yyyy");
frmnavmaintBOResp = frmnavmaintRepository.cmdselectfundClick1(frmnavmaintBOReq);
//  //  May have to change this block - svarghes
//    if(rstNAVData.BOF && rstNAVData.EOF){
//        lblMessage="No data found!";
//        .cmdAdd="ADD";
  //   no records for this fund , so add
  //   this is an attempt to reset the Date picker controls to the
  //   current date and then the setting it to null has the same effect
  //   as setting a textbox control to blank. Just setting the value
  //   to Now did not reset it to the current date. I had to format
  //   the date to get it to change the date value to current date.
//        .DTPNotifiedDate.Value=format()(Now, "mm/dd/yyyy");
//        .DTPNotifiedDate.Value=Null;
//        mstrNotified="";
//		}
//   } else{
//        lblMessage="";
  //  svarghes 07/03/06 added
  //  enable the delete button and change the caption of add to
  //  modify
  //  amend audited value
//    if(==Null(rstNAVData!audited_nav_amt)){
//  //  .txtAmendAuditedVal = "000.0000"
//        mstrAmendAudited="000.0000";
//        cmdDelete=false;
//        cmdAdd="ADD";
//  //  cmdAdd.Enabled = True
//		}
//   } else{
//        cmdDelete=true;
//        cmdAdd="MODIFY";
//        cmdAdd=true;
//        .txtAmendAuditedVal=format()(rstNAVData!audited_nav_amt, "0.00##");
//        mstrAmendAudited=format()(rstNAVData!audited_nav_amt, "0.00##");
//		}
//  //  populate the source
//        me.lblSource=rstNAVData!descp;
//    if(==Null(rstNAVData!audited_nav_notified_dt)){
//        .DTPNotifiedDate.Value=format()(Now, "mm/dd/yyyy");
//        .DTPNotifiedDate.Value=Null;
//        mstrNotified="";
//		}
//   } else{
//        .DTPNotifiedDate.Value=format()(rstNAVData!audited_nav_notified_dt, "mm/dd/yyyy");
//        mstrNotified=format()(rstNAVData!audited_nav_notified_dt, "mm/dd/yyyy");
//		}
//  //  value used by CUV - enable the add button only if there is a value used
//  //  by CUV exists. If there is no value used by CUV, cannot amend anything
//    if(==Null(rstNAVData!nav_amt)){
//        .txtValUsedByCUV="";
//		}
//   } else{
//        .txtValUsedByCUV=format()(rstNAVData!nav_amt, "0.00##");
//        cmdAdd=true;
//		}
//		}
//    rstnavdata(.getClose());
//        .DTPNotifiedDate=true;
//    MsgBox("Error in cmdSelectFund_Click. " & Err.Description, vbExclamation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdselectfundclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdselectfundclick()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
	/**
	 * Method dtpasofdatechange
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> dtpasofdatechange(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: dtpasofdatechange()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();   
	          
	          // TODO Handle in Angular
  //   both fund and as of date must have values for the Select Fund
  //   command button to be enabled
//    if(==Null(.DTPAsOfDate.Value)){
//        .cmdSelectFund=false;
//    enabledisablefields(false);
//		}
// }   else if(.cboFunds.ListIndex >== 0){
//        .cmdSelectFund=true;
//        me.DTPNotifiedDate.Value=Null;
//    enabledisablefields(false);
//		}
//   } else{
//        .cmdSelectFund=false;
//    enabledisablefields(false);
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: dtpasofdatechange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: dtpasofdatechange()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
  //  populates the fund drop down box with fund names
	/**
	 * Method populatefundcombo
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> populatefundcombo(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: populatefundcombo()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();   
	       // TODO Handle in Angular
//Integer i;
//String strSQL;
//Recordset rstFunds;
//        i=0;
frmnavmaintBOResp = frmnavmaintRepository.populatefundcombo1(frmnavmaintBOReq);
//  //   populate the funds combo box as well as a hidden combo box that has
//  //   the corresponding e_invst_instrument_seq values
//    while(rstFunds.EOF){
//    cbofunds(.getAdditemRstfunds!fullnm());
//        cboFunds.ItemData(i)=rstFunds!e_invst_instrument_seq;
//    rstfunds(.getMovenext());
//        i=i + 1;
//		}
//    rstfunds(.getClose());
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: populatefundcombo()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: populatefundcombo()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
	/**
	 * Method dtpnotifieddatechange
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> dtpnotifieddatechange(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: dtpnotifieddatechange()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();   
	       // TODO Handle in Angular
  //  if there is no value used by CUV, leave the add/delete button disabled
//    if(Me.txtValUsedByCUV == ""){
//		}
//    if(!=Null(DTPNotifiedDate.Value)){
//        cmdDelete=false;
//		}
//    if(MstrNotified != DTPNotifiedDate.Value){
//        cmdDelete=false;
//		}
  //        if both amended audited value and re-enter value are populated
  //      enable the add button
  //      If txtAmendAuditedVal.Text <> "" And Me.txtReEnterAmendedAudVal.Text <> "" And Me.DTPNotifiedDate.Value <> "" Then
  //          cmdAdd.Enabled = True
  //      Else
  //          cmdAdd.Enabled = False
  //      End If
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: dtpnotifieddatechange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: dtpnotifieddatechange()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
	/**
	 * Method formload
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> formload(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: formload()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();   
//        .DTPAsOfDate.MaxDate=format()(Now - 1, "mm/dd/yyyy");
  //  dtpnotified date max is today
  //  min is after as of date
//        .DTPNotifiedDate.MaxDate=format()(Now(), "mm/dd/yyyy");
//    populatefundcombo(frmnavmaintBOReq);
  //  Disable the amend audited fields and notified date
//    enabledisablefields(false);
//    MsgBox("Error in Form_Load. " & Err.Description, vbExclamation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: formload()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: formload()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
	/**
	 * Method formunload
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> formunload(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: formunload()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();   
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: formunload()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: formunload()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
	/**
	 * Method txtauditedratekeypress
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> txtauditedratekeypress(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtauditedratekeypress()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>(); 
	          
	       // TODO Handle in Angular
//        keyAscii=ForceNAV(KeyAscii);
//    MsgBox(Err.Description);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtauditedratekeypress()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtauditedratekeypress()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
  //  Private Sub txtAuditedRate_LostFocus()
  //  
  //  ***************************************************************************
  //  Developer: Paul Van Dyke
  //  Comments:  After the audited rate field loses the focus, validate that
  //             a proper audited rate has been entered.
  //  Arguments: None
  //  Returns:   None
  //  ***************************************************************************
  //  Dim intI As Integer
  //  Dim intStart As Integer
  //  Dim intDecimal As Integer
  //  Dim intBeforeDecimal As Integer
  //  
  //      On Error GoTo AError
  //  
  //      With txtAuditedRate
  //          If .Text > "" Then
  //  
  //              If IsNumeric(.Text) Then
  //              Else
  //                  MsgBox "Audited Value is not a valid NAV Amount!"
  //                  .SetFocus
  //                  Exit Sub
  //              End If
  //  
  //              intI = 1
  //              Do Until intI > Len(.Text)
  //  
  //                  If intStart > 0 Then
  //                      If IsNumeric(Mid(.Text, intI, 1)) Then
  //                          intDecimal = intDecimal + 1
  //                      End If
  //  
  //                  ElseIf Mid(.Text, intI, 1) = "." Then
  //                      intStart = intI
  //                  ElseIf IsNumeric(Mid(.Text, intI, 1)) Then
  //                      intBeforeDecimal = intBeforeDecimal + 1
  //                  End If
  //  
  //                  intI = intI + 1
  //  
  //              Loop
  //  
  //              If intBeforeDecimal > 11 Then
  //                  MsgBox "Audited value can have only 11 digits before the decimal"
  //                  .SetFocus
  //                  Exit Sub
  //              End If
  //  
  //              If intDecimal > 4 Then
  //                  MsgBox "Audited value can have only 4 digits after the decimal"
  //                  .SetFocus
  //                  Exit Sub
  //              End If
  //  
  //          End If
  //  
  //      End With
  //  
  //      Exit Sub
  //  
  //  AError:
  //  
  //      MsgBox Err.Description
  //  
  //  End Sub
  //  Private Sub txtReEnterUnaudited_GotFocus()
  //  
  //      With txtAuditedRate
  //  
  //          txtReEnterUnaudited.SelStart = 0
  //          txtReEnterUnaudited.SelLength = 99
  //  
  //      End With
  //  
  //  End Sub
  //  Private Sub txtReEnterUnaudited_KeyPress(KeyAscii As Integer)
  //  
  //      On Error GoTo AError
  //      KeyAscii = ForceNAV(KeyAscii)
  //      Exit Sub
  //  
  //  AError:
  //      MsgBox Err.Description
  //  
  //  End Sub
  //  Private Sub txtReEnterUnaudited_LostFocus()
  //  
  //  ***************************************************************************
  //  Developer: Paul Van Dyke
  //  Comments:  After the re-enter unaudited amount field loses the focus, validate that
  //             a proper nav amount has been entered.
  //  Arguments: None
  //  Returns:   None
  //  ***************************************************************************
  //  
  //  Dim intI As Integer
  //  Dim intStart As Integer
  //  Dim intDecimal As Integer
  //  Dim intBeforeDecimal As Integer
  //  
  //      On Error GoTo AError
  //  
  //      With txtReEnterUnaudited
  //  
  //          If .Text > "" Then
  //  
  //              If IsNumeric(.Text) Then
  //                  If Abs(.Text) = 0 Then
  //                      MsgBox "Re-enter unaudited value cannot be zero"
  //                      .SetFocus
  //                      Exit Sub
  //                  End If
  //              Else
  //                  MsgBox "Re-enter unaudited Value is not a valid NAV Amount!"
  //                  .SetFocus
  //                  Exit Sub
  //              End If
  //  
  //              intI = 1
  //              Do Until intI > Len(.Text)
  //  
  //                  If intStart > 0 Then
  //                      If IsNumeric(Mid(.Text, intI, 1)) Then
  //                          intDecimal = intDecimal + 1
  //                      End If
  //  
  //                  ElseIf Mid(.Text, intI, 1) = "." Then
  //                      intStart = intI
  //                  ElseIf IsNumeric(Mid(.Text, intI, 1)) Then
  //                      intBeforeDecimal = intBeforeDecimal + 1
  //                  End If
  //  
  //                  intI = intI + 1
  //  
  //              Loop
  //  
  //              If intBeforeDecimal > 11 Then
  //                  MsgBox "Re-enter unaudited value can have only 11 digits before the decimal"
  //                  .SetFocus
  //                  Exit Sub
  //              End If
  //  
  //              If intDecimal > 4 Then
  //                  MsgBox "Re-enter unaudited value can have only 4 digits after the decimal"
  //                  .SetFocus
  //                  Exit Sub
  //              End If
  //  
  //          End If
  //  
  //      End With
  //  
  //      Exit Sub
  //  
  //  AError:
  //  
  //      MsgBox Err.Description
  //  
  //  End Sub
  //  svarghes 06/30/2006
	/**
	 * Method txtamendauditedvalchange
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> txtamendauditedvalchange(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtamendauditedvalchange()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>(); 
		       // TODO Handle in Angular
  //  if there is no value used by CUV, leave the add/delete button disabled
//    if(Me.txtValUsedByCUV == ""){
//		}
  //  if both amended audited value and re-enter value are populated
  //  enable the add button
  //      If txtAmendAuditedVal.Text <> "" And Me.txtReEnterAmendedAudVal.Text <> "" And Me.DTPNotifiedDate.Value <> "" Then
  //          cmdAdd.Enabled = True
  //      Else
  //          cmdAdd.Enabled = False
  //      End If
  //  
  //  if the amended audited value is populated, enable the delete button
  //      If txtAmendAuditedVal.Text <> "" Then
  //          cmdDelete.Enabled = True
  //      Else
  //          cmdDelete.Enabled = False
  //      End If
//    if(MstrAmendAudited != Me.txtAmendAuditedVal.Text){
//        cmdDelete=false;
//		}
//   } else{
//        cmdDelete=true;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtamendauditedvalchange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtamendauditedvalchange()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
  //  restrict the user enters anything other than numeric values and decimal
  //  point and popup a warning message
	/**
	 * Method txtamendauditedvalkeypress
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> txtamendauditedvalkeypress(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtamendauditedvalkeypress()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();
		       // TODO Handle in Angular
  //  if enter key is pressed, move the focus to the next control in the tab order
//    if(KeyAscii == 13){
//		}
  //  48-57 are 0-9, 46 is 0 and 8 is backspace key
//    if((KeyAscii < 48 Or KeyAscii > 57) && KeyAscii != 46 && KeyAscii != 8){
//    MsgBox("Numbers 0 to 9  and Decimal point only, please!", vbExclamation + vbOKOnly, "Input Error");
//        keyAscii=0;
//		}
  //  make sure the user doesnt enter more than one decimal point
//    if(KeyAscii == 46){
//    if(DecimalPointExist(Me.txtAmendAuditedVal)){
//    MsgBox("Cannot enter more than one decimal point, amended audited value should be a numeric value!", vbExclamation + vbOKOnly, "Input Error");
//        keyAscii=0;
//		}
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtamendauditedvalkeypress()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtamendauditedvalkeypress()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
	/**
	 * Method txtreenteramendedaudvalchange
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> txtreenteramendedaudvalchange(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtreenteramendedaudvalchange()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>(); 
		       // TODO Handle in Angular
  //  if there is no value used by CUV, leave the add/delete button disabled
//    if(Me.txtValUsedByCUV == ""){
//		}
  //  if both amended audited value and re-enter value are populated
  //  enable the add button
  //      If txtAmendAuditedVal.Text <> "" And Me.txtReEnterAmendedAudVal.Text <> "" And Me.DTPNotifiedDate.Value <> "" Then
  //          cmdAdd.Enabled = True
  //      Else
  //          cmdAdd.Enabled = False
  //      End If
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtreenteramendedaudvalchange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtreenteramendedaudvalchange()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
  //  restrict the user enters anything other than numeric values and decimal
  //  point and popup a warning message
	/**
	 * Method txtreenteramendedaudvalkeypress
	 * @param frmnavmaintBOReq
	 * @return frmnavmaintBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNAVMaintBO> txtreenteramendedaudvalkeypress(FrmNAVMaintBO frmnavmaintBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtreenteramendedaudvalkeypress()"+"argument : "+frmnavmaintBOReq); 
	      List<FrmNAVMaintBO> frmnavmaintBOResp = null;
	      try{
	          frmnavmaintBOResp =  new ArrayList<FrmNAVMaintBO>();
	          
		       // TODO Handle in Angular
  //  if enter key is pressed, move the focus to the next control in the tab order
//    if(KeyAscii == 13){
//		}
  //  48-57 are 0-9, 46 is 0 and 8 is backspace key
//    if((KeyAscii < 48 Or KeyAscii > 57) && KeyAscii != 46 && KeyAscii != 8){
//    MsgBox("Numbers 0 to 9  and Decimal point only, please!", vbExclamation + vbOKOnly, "Input Error");
//        keyAscii=0;
//		}
  //  make sure the user doesnt enter more than one decimal point
//    if(KeyAscii == 46){
//    if(DecimalPointExist(Me.txtReEnterAmendedAudVal)){
//    MsgBox("Cannot enter more than one decimal point, amended audited value should be a numeric value!", vbExclamation + vbOKOnly, "Input Error");
//        keyAscii=0;
//		}
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtreenteramendedaudvalkeypress()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtreenteramendedaudvalkeypress()"+"return : "+frmnavmaintBOResp);
        return frmnavmaintBOResp;
        }
  //  Private Sub txtUnauditedRate_GotFocus()
  //  
  //      With txtUnauditedRate
  //          .SelStart = 0
  //          .SelLength = 99
  //      End With
  //  
  //  End Sub
  //  Private Sub txtUnauditedRate_KeyPress(KeyAscii As Integer)
  //  
  //      On Error GoTo AError
  //       only allow ceratin keys to be pressed
  //      KeyAscii = ForceNAV(KeyAscii)
  //      Exit Sub
  //  
  //  AError:
  //      MsgBox Err.Description
  //  
  //  End Sub
  //  Private Sub txtUnauditedRate_LostFocus()
  //  
  //  ***************************************************************************
  //  Developer: Paul Van Dyke
  //  Comments:  After the transaction amount field loses the focus, validate that
  //             a proper nav amount has been entered.
  //  Arguments: None
  //  Returns:   None
  //  ***************************************************************************
  //  
  //  Dim intI As Integer
  //  Dim intStart As Integer
  //  Dim intDecimal As Integer
  //  Dim intBeforeDecimal As Integer
  //  
  //      On Error GoTo AError
  //  
  //      With txtUnauditedRate
  //  
  //          If .Text > "" Then
  //  
  //              If IsNumeric(.Text) Then
  //                  If Abs(.Text) = 0 Then
  //                      MsgBox " Unaudited value cannot be zero"
  //                      .SetFocus
  //                      Exit Sub
  //                  End If
  //              Else
  //                  MsgBox "Unaudited Value is not a valid NAV Amount!"
  //                  .SetFocus
  //                  Exit Sub
  //              End If
  //  
  //              intI = 1
  //              Do Until intI > Len(.Text)
  //  
  //                  If intStart > 0 Then
  //                      If IsNumeric(Mid(.Text, intI, 1)) Then
  //                          intDecimal = intDecimal + 1
  //                      End If
  //  
  //                  ElseIf Mid(.Text, intI, 1) = "." Then
  //                      intStart = intI
  //                  ElseIf IsNumeric(Mid(.Text, intI, 1)) Then
  //                      intBeforeDecimal = intBeforeDecimal + 1
  //                  End If
  //  
  //                  intI = intI + 1
  //  
  //              Loop
  //  
  //              If intBeforeDecimal > 11 Then
  //                  MsgBox "Unaudited value can have only 11 digits before the decimal"
  //                  .SetFocus
  //                  Exit Sub
  //              End If
  //  
  //              If intDecimal > 4 Then
  //                  MsgBox "Unaudited value can have only 4 digits after the decimal"
  //                  .SetFocus
  //                  Exit Sub
  //              End If
  //  
  //          Else
  //              MsgBox "Unaudited value cannot be blank"
  //              .SetFocus
  //              Exit Sub
  //  
  //          End If
  //  
  //      End With
  //  
  //      Exit Sub
  //  
  //  AError:
  //  
  //      MsgBox Err.Description
  //  
  //  End Sub

}