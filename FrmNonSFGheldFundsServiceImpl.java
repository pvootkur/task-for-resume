package com.sic.tasa.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sic.tasa.dataobject.FrmNonSFGheldFundsBO;
import com.sic.tasa.exceptions.TASABusinessException;
import com.sic.tasa.repositories.IFrmNonSFGheldFundsRepository;
import com.sic.tasa.service.IFrmNonSFGheldFundsService;
import com.sic.tasa.util.AtmaLogger;

/*************************************************************************
 * 
 * SIC CONFIDENTIAL
 * _________________________________________________________________________________
 * 
 * SIC is a trademark of SIC Company.
 *
 * Copyright ? 2017 SIC. All rights reserved.
 * 
 * NOTICE: All information contained herein is, and remains the property of SIC
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to SIC and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from SIC.
 *
 *************************************************************************/
// Author : Generated by ATMA ?
// Revision History :  


@Service
public class FrmNonSFGheldFundsServiceImpl implements  IFrmNonSFGheldFundsService{

    private static final AtmaLogger LOGGER = AtmaLogger.create(FrmNonSFGheldFundsServiceImpl.class);

    @Autowired
    private IFrmNonSFGheldFundsRepository frmnonsfgheldfundsRepository;

    public void setFrmNonSFGheldFundsRepository(IFrmNonSFGheldFundsRepository frmnonsfgheldfundsRepository) {
        this.frmnonsfgheldfundsRepository = frmnonsfgheldfundsRepository;
    }


  //  ------------------------------------------------------------
  //         PopulateAssetClassCombo
  //         -----------------------
  //     Populates the combo box with all asset classes
  //  ------------------------------------------------------------
	/**
	 * Method populateassetclasscombo
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> populateassetclasscombo(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: populateassetclasscombo()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
	          //String strSQL;
//Recordset rs;
//Integer i;
frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.populateassetclasscombo1(frmnonsfgheldfundsBOReq);
//    cboselassetclass(.getClear());
//    do{
//        cboSelAssetClass.ItemData(i)=rs("rp_asset_class_seq");
//        i=i + 1;
//    rs(.getMovenext());
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: populateassetclasscombo()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: populateassetclasscombo()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  ---------------------------------------------------------------------------
  //                 PopulateFunds
  //                 ----------------
  //   populates the fund combo box with non-sfg fund names and non-sfg_fund_seq
  //  ---------------------------------------------------------------------------
	/**
	 * Method populatefunds
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> populatefunds(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: populatefunds()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//String strSQL;
//Recordset rs;
//Integer i;
//        i=0;
//  //  if show all button is selected, assetclassnm will be an empty string
//    if(AssetClassSeq != 0){
frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.populatefunds1(frmnonsfgheldfundsBOReq);
//		}
//   } else{
//frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.populatefunds2(frmnonsfgheldfundsBOReq);
//		}
//    cbofunds(.getClear());
//  //   clear the combo box
//    do{
//    cbofunds(.getAdditemRs().getFields("fundNm"));
//        cboFunds.ItemData(i)=rs("RP_Non_SFG_Fund_Seq");
//    rs(.getMovenext());
//        i=i + 1;
//  //  clear all values from the controls
//        me.txtCusip="";
//        me.txtName="";
//        me.txtSeq="";
//        me.txtTickerSymbol="";
//    enabledisablecontrols(false);
//        cmdSave=false;
//        cmdDelete=false;
//    makeunassignedastext(frmnonsfgheldfundsBOReq);
//        cmdSelFund=false;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: populatefunds()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: populatefunds()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  populateAssetClassSectionCombo
	/**
	 * Method popassetclasscombowithunassigned
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> popassetclasscombowithunassigned(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: popassetclasscombowithunassigned()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//String strSQL;
//Recordset rs;
//Integer i;
//        i=0;
frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.popassetclasscombowithunassigned1(frmnonsfgheldfundsBOReq);
//    cboassetclass(.getClear());
//    do{
//        cboAssetClass.ItemData(i)=rs("rp_asset_class_seq");
//    rs(.getMovenext());
//        i=i + 1;
//    if(! cboAssetClass.ListCount == 0){
//    makeunassignedastext(frmnonsfgheldfundsBOReq);
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: popassetclasscombowithunassigned()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: popassetclasscombowithunassigned()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  MakeUnAssignedAsText
	/**
	 * Method makeunassignedastext
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> makeunassignedastext(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: makeunassignedastext()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//Integer i;
//Boolean bFound;
//        i=0;
//        bFound=false;
//    do{
//    if(VBUtilFunctions.toUpper$(cboAssetClass.List(i)) == "UNASSIGNED"){
//        bFound=true;
//        cboAssetClass.Tag="MakeUnAssigned";
//        cboAssetClass=cboAssetClass.List(i);
//        cboAssetClass.Tag="";
//		}
//        i=i + 1;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: makeunassignedastext()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: makeunassignedastext()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  selects the item in the lower asset class combo
  //  which corresponds to the assetseq
	/**
	 * Method selectassetclass
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> selectassetclass(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: selectassetclass()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//Integer i;
//Boolean bFound;
//        i=0;
//        bFound=false;
//    do{
//    if(cboAssetClass.ItemData(i) == assetSeq){
//        cboAssetClass.Tag="SelectAssetClass";
//        cboAssetClass.ListIndex=i;
//        cboAssetClass.Tag="";
//        mAssetClass=cboAssetClass.Text;
//        bFound=true;
//		}
//        i=i + 1;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: selectassetclass()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: selectassetclass()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
	/**
	 * Method cboassetclasschange
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> cboassetclasschange(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cboassetclasschange()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//    if(txtCusip.Text != "" && txtName.Text != ""){
//        cmdSave=true;
//        cmdDelete=false;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cboassetclasschange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cboassetclasschange()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
	/**
	 * Method cboassetclassclick
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> cboassetclassclick(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cboassetclassclick()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//    if(mAssetClass != cboAssetClass.Text){
//    if(! (cboAssetClass.Tag == "MakeUnAssigned" Or cboAssetClass.Tag == "SelectAssetClass")){
//  //    if the user is changing the text from the function
//  //  dont enable save
//        cmdSave=true;
//        cmdDelete=false;
//		}
//        mAssetClass=cboAssetClass.Text;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cboassetclassclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cboassetclassclick()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
	/**
	 * Method cbofundschange
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> cbofundschange(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cbofundschange()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//    if(cboFunds.Text != ""){
//        cmdSelFund=true;
//		}
//   } else{
//        cmdSelFund=false;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cbofundschange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cbofundschange()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  when an item is selected from the fund drop down
  //  enable the select fund button
	/**
	 * Method cbofundsclick
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> cbofundsclick(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cbofundsclick()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//    if(cboFunds.Text != ""){
//        cmdSelFund=true;
//		}
//   } else{
//        cmdSelFund=false;
//		}
//  //  if the text of cbofund is changed from the save button click, dont
//  //  disbale the controls
//    if(cboFunds.Tag != "save"){
//    enabledisablecontrols(false);
//  //   disbale the user entry controls because
//  //  they havent clicked Select a fund yet
//        txtCusip.Tag="auto";
//        txtCusip="";
//        txtName.Tag="auto";
//        txtName="";
//        txtTickerSymbol.Tag="auto";
//        me.txtTickerSymbol="";
//    makeunassignedastext(frmnonsfgheldfundsBOReq);
//        cmdDelete=false;
//		}
//   } else{
//    enabledisablecontrols(true);
//        cboFunds.Tag="";
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cbofundsclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cbofundsclick()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
	/**
	 * Method cboselassetclassclick
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> cboselassetclassclick(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cboselassetclassclick()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//    populatefunds(me.getCboselassetclass().getItemdata(cboselassetclass().getListindex));
//    MsgBox("Error in cboSelAssetClass_Click. " & Err.Description, vbExclamation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cboselassetclassclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cboselassetclassclick()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  clear to add clears all fields for the user to add a new non-sfg fund
	/**
	 * Method cmdclearclick
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> cmdclearclick(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdclearclick()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//        optShowAll.Value=true;
//    populatefunds(0);
//    if(cboFunds.Text != ""){
//        cmdSelFund=true;
//		}
//   } else{
//        cmdSelFund=false;
//		}
//        me.txtCusip="";
//        me.txtName="";
//        me.txtSeq="";
//        cmdDelete=false;
//        cmdSave=false;
//    makeunassignedastext(frmnonsfgheldfundsBOReq);
//    enabledisablecontrols(true);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdclearclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdclearclick()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  closes the window
	/**
	 * Method cmdcloseclick
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> cmdcloseclick(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdcloseclick()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdcloseclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdcloseclick()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
	/**
	 * Method getsfgfundnames
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> getsfgfundnames(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: getsfgfundnames()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//String strSQL;
//Recordset rs;
//String sfgNames;
//frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.getsfgfundnames1(frmnonsfgheldfundsBOReq);
//    do{
//    if(sfgNames == ""){
//        sfgNames=rs!full_nm;
//		}
//   } else{
//        sfgNames=sfgNames + "," + rs!full_nm;
//		}
//    rs(.getMovenext());
//        getSFGFundNames=sfgNames;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: getsfgfundnames()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: getsfgfundnames()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  if related funds exist for this particular fund pop up a warning message and
  //  notify the user that the relationships will also be deleted
	/**
	 * Method cmddeleteclick
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> cmddeleteclick(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmddeleteclick()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//String strSQL;
//Integer iAnswer;
//Recordset rs;
//String relFundNames;
//String relSFGESeq;
//  //  check whether this fund is related to any funds
frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.cmddeleteClick1(frmnonsfgheldfundsBOReq);
//  //  if relationship exist, inform the user and exit
//    if(! rs.EOF){
//  //   this fund has some relationship
//    do{
//    if(relSFGESeq == ""){
//        relSFGESeq=rs!E_INVST_INSTRUMENT_SEQ;
//		}
//   } else{
//        relSFGESeq=relSFGESeq + "," + rs!E_INVST_INSTRUMENT_SEQ;
//		}
//    rs(.getMovenext());
//  //  returns all the SFG fund names this non-sfg fund is related to
//        relFundNames=GetSFGFundNames(relSFGESeq);
//    MsgBox(cboFunds.Text & " is related to " & UCase$(relFundNames) & ". Please remove the " &                    "relationship(s) before deleting the fund!", vbInformation);
//		}
//   } else{
//  //   no relationship
//        iAnswer=MsgBox("Are you sure you want to delete " + cboFunds.Text + "?", vbOKCancel + vbQuestion);
//    if(iAnswer == vbCancel){
//		}
//		}
//  //  delete the non-sfg fund
frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.cmddeleteClick2(frmnonsfgheldfundsBOReq);
//    cn(.getExecuteStrsql());
//  //  refresh the non-sfg fund combo
//    if(Me.optFilterByAssetClass.Value){
//    populatefunds(me.getCboselassetclass().getItemdata(cboselassetclass().getListindex));
//		}
//   } else{
//    populatefunds(0);
//		}
//    if(cboFunds.Text != ""){
//        cmdSelFund=true;
//		}
//   } else{
//        cmdSelFund=false;
//		}
//        cmdDelete=false;
//        cmdSave=false;
//    enabledisablecontrols(false);
//    MsgBox("Error in cmdDelete_Click: " & Err.Description, vbExclamation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmddeleteclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmddeleteclick()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  CUSip has to be unique for both SFG and non-SFG funds
	/**
	 * Method duplicatecusip
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> duplicatecusip(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: duplicatecusip()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
  //      boolean duplicateCUSIP = false;
//String strSQL;
//Recordset rs;
//    if(txtSeq.Text == ""){
//  //   this is a new record being inserted
//frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.duplicatecusip1(frmnonsfgheldfundsBOReq);
//		}
//   } else{
//  //   this is an update, so query everything except the current record
//frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.duplicatecusip2(frmnonsfgheldfundsBOReq);
//		}
//    if(rs.EOF){
//  //   cusip doesnt exist in RP_non_sfg_Fund
//frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.duplicatecusip3(frmnonsfgheldfundsBOReq);
//    if(rs.EOF){
//  //   cusip doesnt exist in e_invst_instrument_seq either
//        duplicateCUSIP=false;
//		}
//   } else{
//  //   cusip exists in e_invst_instrument_seq
//        duplicateCUSIP=true;
//		}
//		}
//   } else{
//  //    cusip exists in RP_non_sfg_Fund
//        duplicateCUSIP=true;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: duplicatecusip()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: duplicatecusip()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  F- failure adding /updating the record
  //  I- Insert
  //  U - update
  //  FC - CUSIP hasnt met the specs
	/**
	 * Method savechanges
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> savechanges(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: savechanges()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//String strSQL;
//Integer iRecAffected;
//String sinsUpd;
//String cusip;
//Recordset rs;
//Integer i;
//Boolean bFound;
//String tickerSym;
//        cusip=txtCusip.Text;
//    if(VBUtilFunctions.length(VBUtilFunctions.trim(cusip)) < 9){
//    MsgBox("CUSIP has to be 9 characters long!", vbExclamation);
//    txtcusip(.getSetfocus());
//        saveChanges="FC";
//		}
//  //  while adding or updating a record, duplicate CUSIPS are not
//  //  allowed. Popup a message and exit the sub
//    if(DuplicateCUSIP(cusip)){
//    MsgBox("CUSIP has to be unique!", vbExclamation);
//    txtcusip(.getSetfocus());
//        saveChanges="FC";
//		}
//    if(Me.txtTickerSymbol == ""){
//        tickerSym="";
//		}
//   } else{
//        tickerSym=Me.txtTickerSymbol.Text;
//		}
//    if(txtSeq.Text == ""){
//  //   add a new record
frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.savechanges1(frmnonsfgheldfundsBOReq);
//        sinsUpd="I";
//		}
//   } else{
//  //   update
frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.savechanges2(frmnonsfgheldfundsBOReq);
//        sinsUpd="U";
//		}
//    cn(.getExecuteStrsql() ,irecaffected);
//    if(iRecAffected > 0){
//    if(SinsUpd == "U"){
//        saveChanges="U";
//        cmdSave=false;
//		}
//   } else{
//        saveChanges="I";
//        cmdSave=false;
//		}
//		}
//   } else{
//        saveChanges="F";
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: savechanges()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: savechanges()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  if txtSeq is empty, the user is adding a new non-sfg fund,
  //  otherwise it is an update
	/**
	 * Method cmdsaveclick
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> cmdsaveclick(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdsaveclick()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	          
	       // TODO Handle in Angular
//String cusip;
//String strSQL;
//Recordset rs;
//Integer i;
//Boolean bFound;
//        cusip=txtCusip.Text;
//String sMsg;
//        sMsg=SaveChanges();
//    if(sMsg == "I"){
//    MsgBox("Record added successfully!", vbInformation);
//		}
// }   else if(sMsg == "U"){
//    MsgBox("Record updated successfully!", vbInformation);
//		}
// }   else if(sMsg == "F"){
//    MsgBox("Nothing has been saved in the databse!", vbExclamation);
//		}
//   } else{
//		}
//  //  Refresh the fund combo
//    if(Me.optFilterByAssetClass.Value == true){
//    populatefunds(me.getCboselassetclass().getItemdata(cboselassetclass().getListindex));
//		}
//   } else{
//    populatefunds(0);
//		}
//  //  select the currently added item in the combo box and populate the details
frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.cmdsaveClick1(frmnonsfgheldfundsBOReq);
//        i=0;
//        bFound=false;
//        cboFunds.Tag="save";
//  //   indicator to know what to do in cboFunds_click
//    if(! rs.EOF){
//    do{
//    if(cboFunds.ItemData(i) == rs("RP_NON_SFG_FUND_SEQ")){
//        cboFunds=cboFunds.List(i);
//        bFound=true;
//		}
//        i=i + 1;
//    if(bFound){
//  //   if both the selected asset class and the one new fund just added
//  //  has the same asset class select that and populate the details
//    populatefunddetails(cbofunds.getItemdata(cbofunds().getListindex));
//  //   rs.Fields("RP_NON_SFG_FUND_SEQ")
//		}
//		}
//  //  just enable/disble buttons according to the screen content
//    if(cboFunds.Text == ""){
//        cmdSelFund=false;
//        cmdDelete=false;
//    enabledisablecontrols(false);
//		}
//        cmdSave=false;
//    MsgBox("Error in cmdSave_click: " & Err.Description, vbExclamation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdsaveclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdsaveclick()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  populates the text boxes and selects asset class item from the
  //  asset class combo
	/**
	 * Method populatefunddetails
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> populatefunddetails(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: populatefunddetails()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	          
	       // TODO Handle in Angular
//String strSQL;
//Recordset rs;
frmnonsfgheldfundsBOResp = frmnonsfgheldfundsRepository.populatefunddetails1(frmnonsfgheldfundsBOReq);
//    if(! rs.EOF){
//        me.mCusip=rs("CUSIP_ID");
//        txtCusip=rs("CUSIP_ID");
//        me.mName=rs("FUND_NM");
//        txtName=rs("FUND_NM");
//    selectassetclass(rs.getFields("rpAssetClassSeq"));
//  //  seq number to keep track of which record the user is updating
//        txtSeq=rs("RP_NON_SFG_FUND_SEQ");
//    if(! !=Null(rs("Ticker_Symbol_Id"))){
//        me.mTicker=rs("Ticker_Symbol_Id");
//        txtTickerSymbol=rs("Ticker_Symbol_Id");
//		}
//   } else{
//        me.mTicker="";
//        txtTickerSymbol="";
//		}
//  //  if there is value for the selected fund, delete button
//  //  gets enabled
//        cmdDelete=true;
//        cmdSave=false;
//  //   there is no change
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: populatefunddetails()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: populatefunddetails()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  When the user selects a fund by clicking this button, the details such
  //  as CUSIP, name and asset class will be populated
	/**
	 * Method cmdselfundclick
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> cmdselfundclick(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: cmdselfundclick()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//    if(cboFunds.Text == ""){
//    MsgBox("Please select a fund!", vbInformation);
//		}
//    populatefunddetails(cbofunds.getItemdata(cbofunds().getListindex));
//    enabledisablecontrols(true);
//    MsgBox("Error in CmdSelFund_Click : " & Err.Description, vbExclamation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: cmdselfundclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: cmdselfundclick()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
	/**
	 * Method enabledisablecontrols
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> enabledisablecontrols(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: enabledisablecontrols()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
  //  Disable the cusip, name etc when form loads up- enable it back when the user selected
  //  the Select a fund button or clear to add button
//        Me.lblCusip=bEnable;
//        Me.lblASsetClass=bEnable;
//        Me.lblName=bEnable;
//        txtCusip=bEnable;
//        txtName=bEnable;
//        Me.cboAssetClass=bEnable;
//        Me.txtTickerSymbol=bEnable;
//        Me.lblTickerSymbol=bEnable;
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: enabledisablecontrols()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: enabledisablecontrols()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  when the form loads up, the showall button will be selected by default
  //  both Assetclass combo boxes will be populated with no item selected in
  //  the top one and "Unassigned" selected in the bottom one
  //  The save button, select a fund button, delete button will be disabled
	/**
	 * Method formload
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> formload(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: formload()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//        optShowAll.Value=true;
//        me.optFilterByAssetClass.Value=false;
//        Me.cboSelAssetClass=false;
//    populateassetclasscombo(frmnonsfgheldfundsBOReq);
//  //  populateFunds 0
//    popassetclasscombowithunassigned(frmnonsfgheldfundsBOReq);
//  //  Me.cboAssetClass.Enabled = True
//        Me.cmdSelFund=false;
//        Me.cmdSave=false;
//        cmdDelete=false;
//  //  enableDisableControls False
//    MsgBox("Error in Form_Load. " & Err.Description, vbInformation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: formload()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: formload()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  if the user forgot to change, ask whether they want to abandon the changes
	/**
	 * Method formunload
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> formunload(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: formunload()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	          
	       // TODO Handle in Angular
//String strSQL;
//Integer iAnswer;
//String retValSaveChanges;
//    if(cmdSave.Enabled == true){
//        iAnswer=MsgBox("Do you want to save the changes before closing?", vbYesNoCancel + vbQuestion);
//    if(iAnswer == vbCancel){
//  //   dont close the form
//        cancel=1;
//		}
// }   else if(iAnswer == vbYes){
//  //   save the change
//        retValSaveChanges=SaveChanges();
//  //  if there is a problem ,the return value will be either
//  //  F or FC, leave the form open, do not unload
//    if(VBUtilFunctions.left$(retValSaveChanges, 1) == "F"){
//        cancel=1;
//		}
//		}
//		}
//    MsgBox("Error in Form_Unload. " & Err.Description, vbExclamation);
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: formunload()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: formunload()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  when the user selects this option enables the asset class combo
  //  otherwise disable it
	/**
	 * Method optfilterbyassetclassclick
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> optfilterbyassetclassclick(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: optfilterbyassetclassclick()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	          
	       // TODO Handle in Angular
//    if(optFilterByAssetClass.Value){
//        Me.cboSelAssetClass=true;
//		}
//   } else{
//        Me.cboSelAssetClass=false;
//		}
//    if(cboSelAssetClass.ListIndex >== 0){
//    populatefunds(me.getCboselassetclass().getItemdata(cboselassetclass().getListindex));
//		}
//   } else{
//    cbofunds(.getClear());
//        me.txtCusip="";
//        txtName="";
//    makeunassignedastext(frmnonsfgheldfundsBOReq);
//        cmdSelFund=false;
//        me.txtTickerSymbol="";
//        cmdSave=false;
//        cmdDelete=false;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: optfilterbyassetclassclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: optfilterbyassetclassclick()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
	/**
	 * Method optshowallclick
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> optshowallclick(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: optshowallclick()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
//    if(optShowAll.Value){
//        Me.cboSelAssetClass=false;
//    populatefunds(0);
//		}
//  //  disble the select a fund button if there is no fund selected
//    if(cboFunds.Text == ""){
//        cmdSelFund=false;
//		}
//   } else{
//        cmdSelFund=true;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: optshowallclick()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: optshowallclick()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  when the user starts typing in the txtCusip and if it is different from
  //  the one already there, enable
	/**
	 * Method txtcusipchange
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> txtcusipchange(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtcusipchange()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
  //  if there is an automatic clearing of text box,
  //  just exit this sub
//    if(txtCusip.Tag == "auto"){
//        txtCusip.Tag="";
//		}
//    if(txtCusip.Text != Me.mCusip){
//        Me.cmdSave=true;
//        cmdDelete=false;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtcusipchange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtcusipchange()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
	/**
	 * Method txtcusipkeypress
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> txtcusipkeypress(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtcusipkeypress()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
  //  check for special characters
//    if((KeyAscii >== 32 && KeyAscii <== 47) Or        (KeyAscii >== 58 && KeyAscii <== 64) Or        (KeyAscii >== 91 && KeyAscii <== 96) Or        (KeyAscii >== 123 && KeyAscii <== 127)){
//    MsgBox("Alpha Numeric characters Only, Please!");
//        keyAscii=0;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtcusipkeypress()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtcusipkeypress()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  once the user starts making any change in the name field, the savetodb
  //  button gets enabled
	/**
	 * Method txtnamechange
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> txtnamechange(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txtnamechange()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
  //  if there is an automatic clearing of text box,
  //  just exit this sub
//    if(txtName.Tag == "auto"){
//        txtName.Tag="";
//		}
//    if(txtName.Text != Me.mName){
//        Me.cmdSave=true;
//        cmdDelete=false;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txtnamechange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txtnamechange()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }
  //  once the user starts making any change in the ticker symbol, the savetodb
  //  button gets enabled
	/**
	 * Method txttickersymbolchange
	 * @param frmnonsfgheldfundsBOReq
	 * @return frmnonsfgheldfundsBOResp
	 * @throws TASABusinessException
	 */
    public List<FrmNonSFGheldFundsBO> txttickersymbolchange(FrmNonSFGheldFundsBO frmnonsfgheldfundsBOReq) throws TASABusinessException{
	      LOGGER.debug("Entering into the method: txttickersymbolchange()"+"argument : "+frmnonsfgheldfundsBOReq); 
	      List<FrmNonSFGheldFundsBO> frmnonsfgheldfundsBOResp = null;
	      try{
	          frmnonsfgheldfundsBOResp =  new ArrayList<FrmNonSFGheldFundsBO>();
	       // TODO Handle in Angular
  //  if there is an automatic clearing of text box,
  //  just exit this sub
//    if(txtTickerSymbol.Tag == "auto"){
//        txtTickerSymbol.Tag="";
//		}
//    if(txtTickerSymbol.Text != Me.mTicker){
//        cmdSave=true;
//        cmdDelete=false;
//		}
        }catch (Exception ex){
            LOGGER.error("Error occurred in method: txttickersymbolchange()"+"and terminated due to " + ex.getMessage());
            throw new TASABusinessException(ex);
        }
        LOGGER.debug("Exiting the method: txttickersymbolchange()"+"return : "+frmnonsfgheldfundsBOResp);
        return frmnonsfgheldfundsBOResp;
        }

}