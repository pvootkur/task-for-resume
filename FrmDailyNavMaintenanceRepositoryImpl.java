package com.sic.tasa.repositories.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.orm.hibernate4.HibernateTemplate;
import org.springframework.stereotype.Repository;

import com.sic.tasa.dataobject.FrmDailyNavMaintenanceBO;
import com.sic.tasa.exceptions.TASADataAccessException;
import com.sic.tasa.repositories.IFrmDailyNavMaintenanceRepository;
import com.sic.tasa.util.AtmaLogger;
//import com.sic.tasa.util.ObjectCopier;

/*************************************************************************
 * 
 * SIC CONFIDENTIAL
 * _________________________________________________________________________________
 * 
 * SIC is a trademark of SIC Company.
 *
 * Copyright ? 2017 SIC. All rights reserved.
 * 
 * NOTICE: All information contained herein is, and remains the property of SIC
 * and its suppliers, if any. The intellectual and technical concepts contained
 * herein are proprietary to SIC and its suppliers and may be covered by U.S.
 * and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this
 * material is strictly forbidden unless prior written permission is obtained
 * from SIC.
 *
 *************************************************************************/
// Author : Generated by ATMA ?
// Revision History :


@Repository
public class FrmDailyNavMaintenanceRepositoryImpl implements IFrmDailyNavMaintenanceRepository{

    private static AtmaLogger LOGGER = AtmaLogger.create(FrmDailyNavMaintenanceRepositoryImpl.class);

    private HibernateTemplate template;


    /*
	 * Method populatesfgfund1
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASADataAccessException
	 */
    public List<FrmDailyNavMaintenanceBO> populatesfgfund1() throws TASADataAccessException {
	    LOGGER.debug("Entering into the method: populatesfgfund1 "); 
	    List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp =new ArrayList<FrmDailyNavMaintenanceBO>();
	    FrmDailyNavMaintenanceBO bo = new FrmDailyNavMaintenanceBO();
    	bo.setCbofunds("test");
    	frmdailynavmaintenanceBOResp.add(bo);
    	bo = new FrmDailyNavMaintenanceBO();
    	bo.setCbofunds("test1");
    	frmdailynavmaintenanceBOResp.add(bo);
    	bo = new FrmDailyNavMaintenanceBO();
    	bo.setCbofunds("test2");
    	frmdailynavmaintenanceBOResp.add(bo);
	    
//	    String sql = "SELECT full_nm, e_invst_instrument_seq FROM " +
//            " rp_modified_investment_pool WHERE status_txt in " +
//            " ('SETUP', 'ACTIVE') and e_invst_instrument_seq is not null" +
//            " ORDER BY full_nm";
	    try {
//	         List<IDomainObj>  entityList = template.find(sql,new BeanPropertyRowMapper<IDomainObj>(<IDomainObj>.class));
//	         ObjectCopier.copy(entityList, frmdailynavmaintenanceBOResp);  
	    }catch (Exception ex) {
            LOGGER.error("Error occurred in method: populatesfgfund1()" +"and terminated due to " + ex.getMessage());
            throw new TASADataAccessException(ex);
        }        
        LOGGER.debug("Exiting the method: populatesfgfund1()"+"return : "+frmdailynavmaintenanceBOResp);
         return frmdailynavmaintenanceBOResp;
    }
    /*
	 * Method cmdaddmodifyClick1
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASADataAccessException
	 */
    public List<FrmDailyNavMaintenanceBO> cmdaddmodifyClick1(FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq) throws TASADataAccessException {
	    LOGGER.debug("Entering into the method: cmdaddmodifyClick1 and argument : "+frmdailynavmaintenanceBOReq); 
	    List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp =new ArrayList<FrmDailyNavMaintenanceBO>();
	    String sql = "Select * from WK_DLY_SFG_NAV_SRC where E_INVST_INSTRUMENT_SEQ = " +
	    		frmdailynavmaintenanceBOReq.getCbofunds()
//            cboFunds.ItemData(cboFunds.ListIndex) 
            + " and RP_NAV_DIVIDEND_SRC_TYPE_CD =" +
            "'MANUAL_ENTERED'";
	    try {
//	         List<IDomainObj>  entityList = template.find(sql,new BeanPropertyRowMapper<IDomainObj>(<IDomainObj>.class));
//	         ObjectCopier.copy(entityList, frmdailynavmaintenanceBOResp);  
	    }catch (Exception ex) {
            LOGGER.error("Error occurred in method: cmdaddmodifyClick1()" +"and terminated due to " + ex.getMessage());
            throw new TASADataAccessException(ex);
        }        
        LOGGER.debug("Exiting the method: cmdaddmodifyClick1()"+"return : "+frmdailynavmaintenanceBOResp);
         return frmdailynavmaintenanceBOResp;
    }
    /*
	 * Method cmdaddmodifyClick2
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASADataAccessException
	 */
    public List<FrmDailyNavMaintenanceBO> cmdaddmodifyClick2(FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq) throws TASADataAccessException {
	    LOGGER.debug("Entering into the method: cmdaddmodifyClick2 and argument : "+frmdailynavmaintenanceBOReq); 
	    List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp =new ArrayList<FrmDailyNavMaintenanceBO>();
	    String sql = "Insert into WK_DLY_SFG_NAV_SRC (E_INVST_INSTRUMENT_SEQ,RP_NAV_DIVIDEND_SRC_TYPE_CD," +
                " NAV_AMT, AS_OF_DT) VALUES(" + frmdailynavmaintenanceBOReq.getCbofunds() + ", 'MANUAL_ENTERED'," +
                frmdailynavmaintenanceBOReq.getTxtmanualval() +
//                Me.txtManualVal 
                ", to_date('" +
                frmdailynavmaintenanceBOReq.getTxtasofdate()
//                Format(Me.txtAsOfDate, "dd-mmm-yyyy") 
                + "'))";
	    try {
//	         List<IDomainObj>  entityList = template.find(sql,new BeanPropertyRowMapper<IDomainObj>(<IDomainObj>.class));
//	         ObjectCopier.copy(entityList, frmdailynavmaintenanceBOResp);  
	    }catch (Exception ex) {
            LOGGER.error("Error occurred in method: cmdaddmodifyClick2()" +"and terminated due to " + ex.getMessage());
            throw new TASADataAccessException(ex);
        }        
        LOGGER.debug("Exiting the method: cmdaddmodifyClick2()"+"return : "+frmdailynavmaintenanceBOResp);
         return frmdailynavmaintenanceBOResp;
    }
    /*
	 * Method cmdaddmodifyClick3
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASADataAccessException
	 */
    public List<FrmDailyNavMaintenanceBO> cmdaddmodifyClick3(FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq) throws TASADataAccessException {
	    LOGGER.debug("Entering into the method: cmdaddmodifyClick3 and argument : "+frmdailynavmaintenanceBOReq); 
	    List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp =new ArrayList<FrmDailyNavMaintenanceBO>();
	    String sql = "Update WK_DLY_SFG_NAV_SRC SET NAV_AMT =" +  frmdailynavmaintenanceBOReq.getManval() +
                ", AS_OF_DT = to_date('" +frmdailynavmaintenanceBOReq.getTxtasofdate()+ "')" +
                " where E_INVST_INSTRUMENT_SEQ = " +frmdailynavmaintenanceBOReq.getCbofunds() +
                " and RP_NAV_DIVIDEND_SRC_TYPE_CD = 'MANUAL_ENTERED'";
	    try {
//	         List<IDomainObj>  entityList = template.find(sql,new BeanPropertyRowMapper<IDomainObj>(<IDomainObj>.class));
//	         ObjectCopier.copy(entityList, frmdailynavmaintenanceBOResp);  
	    }catch (Exception ex) {
            LOGGER.error("Error occurred in method: cmdaddmodifyClick3()" +"and terminated due to " + ex.getMessage());
            throw new TASADataAccessException(ex);
        }        
        LOGGER.debug("Exiting the method: cmdaddmodifyClick3()"+"return : "+frmdailynavmaintenanceBOResp);
         return frmdailynavmaintenanceBOResp;
    }
    /*
	 * Method cmddeleteClick1
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASADataAccessException
	 */
    public List<FrmDailyNavMaintenanceBO> cmddeleteClick1(FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq) throws TASADataAccessException {
	    LOGGER.debug("Entering into the method: cmddeleteClick1 and argument : "+frmdailynavmaintenanceBOReq); 
	    List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp =new ArrayList<FrmDailyNavMaintenanceBO>();
	    String sql = "Delete from WK_DLY_SFG_NAV_SRC where E_INVST_INSTRUMENT_SEQ = " +
	    		frmdailynavmaintenanceBOReq.getCbofunds() + " and RP_NAV_DIVIDEND_SRC_TYPE_CD = " +
                "'MANUAL_ENTERED'";
	    try {
//	         List<IDomainObj>  entityList = template.find(sql,new BeanPropertyRowMapper<IDomainObj>(<IDomainObj>.class));
//	         ObjectCopier.copy(entityList, frmdailynavmaintenanceBOResp);  
	    }catch (Exception ex) {
            LOGGER.error("Error occurred in method: cmddeleteClick1()" +"and terminated due to " + ex.getMessage());
            throw new TASADataAccessException(ex);
        }        
        LOGGER.debug("Exiting the method: cmddeleteClick1()"+"return : "+frmdailynavmaintenanceBOResp);
         return frmdailynavmaintenanceBOResp;
    }
    /*
	 * Method populateselectedfunddetails1
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASADataAccessException
	 */
    public List<FrmDailyNavMaintenanceBO> populateselectedfunddetails1(FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq) throws TASADataAccessException {
	    LOGGER.debug("Entering into the method: populateselectedfunddetails1 and argument : "+frmdailynavmaintenanceBOReq); 
	    List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp =new ArrayList<FrmDailyNavMaintenanceBO>();
	    FrmDailyNavMaintenanceBO bo = new FrmDailyNavMaintenanceBO();
    	bo.setCbofunds("test");
    	frmdailynavmaintenanceBOResp.add(bo);
    	bo = new FrmDailyNavMaintenanceBO();
    	bo.setCbofunds("test1");
    	frmdailynavmaintenanceBOResp.add(bo);
    	bo = new FrmDailyNavMaintenanceBO();
    	bo.setCbofunds("test2");
    	frmdailynavmaintenanceBOResp.add(bo);
//	    STRING SQL = "SELECT WK.NAV_AMT, SRC.DESCP, WK.RP_NAV_DIVIDEND_SRC_TYPE_CD  SRC_CD FROM WK_DLY_SFG_NAV_SRC WK, " +
//             " RP_NAV_DIVIDEND_SRC_TYPE  SRC WHERE E_INVST_INSTRUMENT_SEQ = " +
//             FRMDAILYNAVMAINTENANCEBOREQ.GETFUNDSEQ() + " AND AS_OF_DT = TO_DATE('" +FRMDAILYNAVMAINTENANCEBOREQ.GETTXTASOFDATE()+ "')" +
//             " AND WK.RP_NAV_DIVIDEND_SRC_TYPE_CD = SRC.RP_NAV_DIVIDEND_SRC_TYPE_CD AND " +
//             " WK.RP_NAV_DIVIDEND_SRC_TYPE_CD not like 'ESTIMATED%'";
	    try {
//	         List<IDomainObj>  entityList = template.find(sql,new BeanPropertyRowMapper<IDomainObj>(<IDomainObj>.class));
//	         ObjectCopier.copy(entityList, frmdailynavmaintenanceBOResp);  
	    }catch (Exception ex) {
            LOGGER.error("Error occurred in method: populateselectedfunddetails1()" +"and terminated due to " + ex.getMessage());
            throw new TASADataAccessException(ex);
        }        
        LOGGER.debug("Exiting the method: populateselectedfunddetails1()"+"return : "+frmdailynavmaintenanceBOResp);
         return frmdailynavmaintenanceBOResp;
    }
    /*
	 * Method populateselectedfunddetails2
	 * @param frmdailynavmaintenanceBOReq
	 * @return frmdailynavmaintenanceBOResp
	 * @throws TASADataAccessException
	 */
    public List<FrmDailyNavMaintenanceBO> populateselectedfunddetails2(FrmDailyNavMaintenanceBO frmdailynavmaintenanceBOReq) throws TASADataAccessException {
	    LOGGER.debug("Entering into the method: populateselectedfunddetails2 and argument : "+frmdailynavmaintenanceBOReq); 
	    List<FrmDailyNavMaintenanceBO> frmdailynavmaintenanceBOResp =new ArrayList<FrmDailyNavMaintenanceBO>();
	    String sql = "Select WK.NAV_AMT, SRC.DESCP, WK.RP_NAV_DIVIDEND_SRC_TYPE_CD  SRC_CD,pr.PRIORITY_NBR " +
             " from WK_DLY_SFG_NAV_SRC WK, RP_NAV_DIVIDEND_SRC_TYPE  SRC, rp_nav_src_priority pr " +
             " where E_INVST_INSTRUMENT_SEQ = " +frmdailynavmaintenanceBOReq.getFundSeq() + " and AS_OF_DT = " +
             " to_date('" +frmdailynavmaintenanceBOReq.getTxtasofdate()+ "')" +
             " and WK.RP_NAV_DIVIDEND_SRC_TYPE_CD = SRC.RP_NAV_DIVIDEND_SRC_TYPE_CD and " +
             " wk.RP_NAV_DIVIDEND_SRC_TYPE_CD = pr.RP_NAV_DIVIDEND_SRC_TYPE_CD and " +
             " WK.RP_NAV_DIVIDEND_SRC_TYPE_CD like 'ESTIMATED%' " +
             "ORDER BY pr.PRIORITY_NBR desc";
	    try {
//	         List<IDomainObj>  entityList = template.find(sql,new BeanPropertyRowMapper<IDomainObj>(<IDomainObj>.class));
//	         ObjectCopier.copy(entityList, frmdailynavmaintenanceBOResp);  
	    }catch (Exception ex) {
            LOGGER.error("Error occurred in method: populateselectedfunddetails2()" +"and terminated due to " + ex.getMessage());
            throw new TASADataAccessException(ex);
        }        
        LOGGER.debug("Exiting the method: populateselectedfunddetails2()"+"return : "+frmdailynavmaintenanceBOResp);
         return frmdailynavmaintenanceBOResp;
    }

}